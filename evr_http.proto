syntax = "proto3";

package evr;

import "google/api/annotations.proto";
import "evr.proto";
import "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/heroiclabs/nakama/v3/apigrpc";
option java_package = "com.heroiclabs.evr.api";
option java_multiple_files = true;
option java_outer_classname = "EvrApiGrpc";
option csharp_namespace = "Evr.API";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "EVR API";
    version: "2.0";
    contact: {
      name: "The EVR Authors & Contributors";
      url: "https://github.com/EchoTools/evr-backend";
      email: "";
    };
  };
  host: "127.0.0.1:7350";
  external_docs: {
    url: "https://github.com/EchoTools/evr-backend";
    description: "EVR server documentation";
  }
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BasicAuth";
      value: {
        type: TYPE_BASIC;
      }
    }
    security: {
      key: "BearerJwt"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
      }
    }
    security: {
      key: "HttpKeyAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "http_key";
      }
    }
  }
  // Default security definition.
  security: {
    security_requirement: {
      key: "BearerJwt";
      value: {};
    }
  }
};


// EvrHttp service definition
service EvrHttp {
    rpc AccountSearch(AccountSearchRequest) returns (AccountSearchResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/account/search"
            body: "*"
        };
    }
    rpc AccountLookup(AccountLookupRequest) returns (AccountLookupResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/account/lookup"
            body: "*"
        };
    }
    rpc AuthenticatePassword(AuthenticatePasswordRequest) returns (Session) {
        option (google.api.http) = {
            post: "/v2/rpc/account/authenticate/password"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "BasicAuth";
                    value: {};
                }
            }
        };
    }
    rpc LeaderboardHaystack(LeaderboardHaystackRequest) returns (LeaderboardHaystackResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/leaderboard/haystack"
            body: "*"
        };
    }
    rpc LeaderboardRecordsList(LeaderboardRecordsListRequest) returns (LeaderboardRecordsListResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/leaderboard/records"
            body: "*"
        };
    }
    rpc LinkDevice(LinkDeviceRequest) returns (LinkDeviceResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/link/device"
            body: "*"
        };
    }
    rpc LinkUserIdDevice(LinkUserIdDeviceRequest) returns (LinkUserIdDeviceResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/link/usernamedevice"
            body: "*"
        };
    }
    rpc DiscordSignIn(DiscordSignInRequest) returns (DiscordSignInResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/signin/discord"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "BasicAuth";
                    value: {};
                }
            }
        };
    }
    rpc MatchListPublic(MatchListPublicRequest) returns (MatchListPublicResponse) {
        option (google.api.http) = {
            get: "/v2/rpc/match/public"
        };
    }
    rpc GetMatch(MatchRequest) returns (MatchResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/match"
            body: "*"
        };
    }
    rpc PrepareMatch(PrepareMatchRequest) returns (PrepareMatchResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/match/prepare"
            body: "*"
        };
    }
    rpc AllocateMatch(AllocateMatchRequest) returns (AllocateMatchResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/match/allocate"
            body: "*"
        };
    }
    rpc ShutdownMatch(ShutdownMatchRequest) returns (ShutdownMatchResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/match/terminate"
            body: "*"
        };
    }
    rpc BuildMatch(BuildMatchRequest) returns (BuildMatchResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/match/build"
            body: "*"
        };
    }
    rpc SetNextMatch(SetNextMatchRequest) returns (SetNextMatchResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/player/setnextmatch"
            body: "*"
        };
    }
    rpc GetPlayerStatistics(PlayerStatisticsRequest) returns (PlayerStatisticsResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/player/statistics"
            body: "*"
        };
    }
    rpc KickPlayer(KickPlayerRequest) returns (KickPlayerResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/player/kick"
            body: "*"
        };
    }
    rpc GetUserServerProfile(UserServerProfileRequest) returns (UserServerProfileResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/player/profile"
            body: "*"
        };
    }
    rpc LinkingApp(LinkingAppRequest) returns (LinkingAppResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/link"
            body: "*"
        };
    }
    rpc GetStatus(ServiceStatusRequest) returns (ServiceStatusResponse) {
        option (google.api.http) = {
            get: "/v2/rpc/evr/servicestatus"
        };
    }
    rpc ImportLoadouts(ImportLoadoutsRequest) returns (ImportLoadoutsResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/importloadouts"
            body: "*"
        };
    }
    rpc MatchmakerStream(MatchmakerStreamRequest) returns (MatchmakerStreamResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/matchmaker/stream"
            body: "*"
        };
    }
    rpc MatchmakerState(MatchmakerStateRequest) returns (MatchmakerStateResponse) {
        option (google.api.http) = {
            get: "/v2/rpc/matchmaker/state"
        };
    }
    rpc MatchmakerCandidates(MatchmakerCandidatesRequest) returns (MatchmakerCandidatesResponse) {
        option (google.api.http) = {
            get: "/v2/rpc/matchmaker/candidates"
        };
    }
    rpc StreamJoin(StreamJoinRequest) returns (StreamJoinResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/stream/join"
            body: "*"
        };
    }
    rpc GetServerScore(ServerScoreRequest) returns (ServerScoreResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/server/score"
            body: "*"
        };
    }
    rpc GetServerScores(ServerScoresRequest) returns (ServerScoresResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/server/scores"
            body: "*"
        };
    }
    rpc CheckForceUser(CheckForceUserRequest) returns (CheckForceUserResponse) {
        option (google.api.http) = {
            post: "/v2/rpc/forcecheck"
            body: "*"
        };
    }
}
