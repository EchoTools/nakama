// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: evr.proto

package apigrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TeamIndex int32

const (
	TeamIndex_UNASSIGNED TeamIndex = 0
	TeamIndex_BLUE       TeamIndex = 1
	TeamIndex_ORANGE     TeamIndex = 2
	TeamIndex_SPECTATOR  TeamIndex = 3
	TeamIndex_MODERATOR  TeamIndex = 4
	TeamIndex_SOCIAL     TeamIndex = 5
)

// Enum value maps for TeamIndex.
var (
	TeamIndex_name = map[int32]string{
		0: "UNASSIGNED",
		1: "BLUE",
		2: "ORANGE",
		3: "SPECTATOR",
		4: "MODERATOR",
		5: "SOCIAL",
	}
	TeamIndex_value = map[string]int32{
		"UNASSIGNED": 0,
		"BLUE":       1,
		"ORANGE":     2,
		"SPECTATOR":  3,
		"MODERATOR":  4,
		"SOCIAL":     5,
	}
)

func (x TeamIndex) Enum() *TeamIndex {
	p := new(TeamIndex)
	*p = x
	return p
}

func (x TeamIndex) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeamIndex) Descriptor() protoreflect.EnumDescriptor {
	return file_evr_proto_enumTypes[0].Descriptor()
}

func (TeamIndex) Type() protoreflect.EnumType {
	return &file_evr_proto_enumTypes[0]
}

func (x TeamIndex) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TeamIndex.Descriptor instead.
func (TeamIndex) EnumDescriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{0}
}

// General purpose messages
type Symbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Symbol) Reset() {
	*x = Symbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Symbol) ProtoMessage() {}

func (x *Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Symbol.ProtoReflect.Descriptor instead.
func (*Symbol) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{0}
}

func (x *Symbol) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type EvrId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EvrId) Reset() {
	*x = EvrId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvrId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvrId) ProtoMessage() {}

func (x *EvrId) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvrId.ProtoReflect.Descriptor instead.
func (*EvrId) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{1}
}

func (x *EvrId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type AccountCosmetics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number          int64            `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	CosmeticLoadout *CosmeticLoadout `protobuf:"bytes,2,opt,name=cosmetic_loadout,json=cosmeticLoadout,proto3" json:"cosmetic_loadout,omitempty"`
}

func (x *AccountCosmetics) Reset() {
	*x = AccountCosmetics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountCosmetics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCosmetics) ProtoMessage() {}

func (x *AccountCosmetics) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCosmetics.ProtoReflect.Descriptor instead.
func (*AccountCosmetics) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{2}
}

func (x *AccountCosmetics) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *AccountCosmetics) GetCosmeticLoadout() *CosmeticLoadout {
	if x != nil {
		return x.CosmeticLoadout
	}
	return nil
}

type AccountLookupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DiscordId   string `protobuf:"bytes,3,opt,name=discord_id,json=discordId,proto3" json:"discord_id,omitempty"`
	Xpid        string `protobuf:"bytes,4,opt,name=xpid,proto3" json:"xpid,omitempty"`
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *AccountLookupRequest) Reset() {
	*x = AccountLookupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountLookupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountLookupRequest) ProtoMessage() {}

func (x *AccountLookupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountLookupRequest.ProtoReflect.Descriptor instead.
func (*AccountLookupRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{3}
}

func (x *AccountLookupRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AccountLookupRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AccountLookupRequest) GetDiscordId() string {
	if x != nil {
		return x.DiscordId
	}
	return ""
}

func (x *AccountLookupRequest) GetXpid() string {
	if x != nil {
		return x.Xpid
	}
	return ""
}

func (x *AccountLookupRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type AccountLookupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DiscordId   string     `protobuf:"bytes,2,opt,name=discord_id,json=discordId,proto3" json:"discord_id,omitempty"`
	Username    string     `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	DisplayName string     `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	AvatarUrl   string     `protobuf:"bytes,5,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	IpqsData    *anypb.Any `protobuf:"bytes,6,opt,name=ipqs_data,json=ipqsData,proto3" json:"ipqs_data,omitempty"`
}

func (x *AccountLookupResponse) Reset() {
	*x = AccountLookupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountLookupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountLookupResponse) ProtoMessage() {}

func (x *AccountLookupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountLookupResponse.ProtoReflect.Descriptor instead.
func (*AccountLookupResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{4}
}

func (x *AccountLookupResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccountLookupResponse) GetDiscordId() string {
	if x != nil {
		return x.DiscordId
	}
	return ""
}

func (x *AccountLookupResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AccountLookupResponse) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AccountLookupResponse) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *AccountLookupResponse) GetIpqsData() *anypb.Any {
	if x != nil {
		return x.IpqsData
	}
	return nil
}

type AccountSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayNamePattern string `protobuf:"bytes,1,opt,name=display_name_pattern,json=displayNamePattern,proto3" json:"display_name_pattern,omitempty"`
	Limit              int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *AccountSearchRequest) Reset() {
	*x = AccountSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSearchRequest) ProtoMessage() {}

func (x *AccountSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSearchRequest.ProtoReflect.Descriptor instead.
func (*AccountSearchRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{5}
}

func (x *AccountSearchRequest) GetDisplayNamePattern() string {
	if x != nil {
		return x.DisplayNamePattern
	}
	return ""
}

func (x *AccountSearchRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type AccountSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor             string                  `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	DisplayNameMatches []*DisplayNameMatchItem `protobuf:"bytes,2,rep,name=display_name_matches,json=displayNameMatches,proto3" json:"display_name_matches,omitempty"`
}

func (x *AccountSearchResponse) Reset() {
	*x = AccountSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSearchResponse) ProtoMessage() {}

func (x *AccountSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSearchResponse.ProtoReflect.Descriptor instead.
func (*AccountSearchResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{6}
}

func (x *AccountSearchResponse) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *AccountSearchResponse) GetDisplayNameMatches() []*DisplayNameMatchItem {
	if x != nil {
		return x.DisplayNameMatches
	}
	return nil
}

type AllocateMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId          string                 `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	OwnerId          string                 `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	ExpiryTime       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	TeamAlignments   map[string]string      `protobuf:"bytes,4,rep,name=team_alignments,json=teamAlignments,proto3" json:"team_alignments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mode             string                 `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`
	Level            string                 `protobuf:"bytes,6,opt,name=level,proto3" json:"level,omitempty"`
	TeamSize         *wrapperspb.Int32Value `protobuf:"bytes,7,opt,name=team_size,json=teamSize,proto3" json:"team_size,omitempty"`
	RequiredFeatures []string               `protobuf:"bytes,8,rep,name=required_features,json=requiredFeatures,proto3" json:"required_features,omitempty"`
	Region           string                 `protobuf:"bytes,9,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *AllocateMatchRequest) Reset() {
	*x = AllocateMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateMatchRequest) ProtoMessage() {}

func (x *AllocateMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateMatchRequest.ProtoReflect.Descriptor instead.
func (*AllocateMatchRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{7}
}

func (x *AllocateMatchRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AllocateMatchRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *AllocateMatchRequest) GetExpiryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

func (x *AllocateMatchRequest) GetTeamAlignments() map[string]string {
	if x != nil {
		return x.TeamAlignments
	}
	return nil
}

func (x *AllocateMatchRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *AllocateMatchRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *AllocateMatchRequest) GetTeamSize() *wrapperspb.Int32Value {
	if x != nil {
		return x.TeamSize
	}
	return nil
}

func (x *AllocateMatchRequest) GetRequiredFeatures() []string {
	if x != nil {
		return x.RequiredFeatures
	}
	return nil
}

func (x *AllocateMatchRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type AllocateMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label *MatchLabel `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *AllocateMatchResponse) Reset() {
	*x = AllocateMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateMatchResponse) ProtoMessage() {}

func (x *AllocateMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateMatchResponse.ProtoReflect.Descriptor instead.
func (*AllocateMatchResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{8}
}

func (x *AllocateMatchResponse) GetLabel() *MatchLabel {
	if x != nil {
		return x.Label
	}
	return nil
}

type AuthenticatePasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DiscordId    string `protobuf:"bytes,2,opt,name=discord_id,json=discordId,proto3" json:"discord_id,omitempty"`
	Username     string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password     string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	RefreshToken string `protobuf:"bytes,5,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	Intents      string `protobuf:"bytes,6,opt,name=intents,proto3" json:"intents,omitempty"`
}

func (x *AuthenticatePasswordRequest) Reset() {
	*x = AuthenticatePasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticatePasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticatePasswordRequest) ProtoMessage() {}

func (x *AuthenticatePasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticatePasswordRequest.ProtoReflect.Descriptor instead.
func (*AuthenticatePasswordRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{9}
}

func (x *AuthenticatePasswordRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AuthenticatePasswordRequest) GetDiscordId() string {
	if x != nil {
		return x.DiscordId
	}
	return ""
}

func (x *AuthenticatePasswordRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuthenticatePasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AuthenticatePasswordRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *AuthenticatePasswordRequest) GetIntents() string {
	if x != nil {
		return x.Intents
	}
	return ""
}

type BuildMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*MatchmakerEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *BuildMatchRequest) Reset() {
	*x = BuildMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMatchRequest) ProtoMessage() {}

func (x *BuildMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMatchRequest.ProtoReflect.Descriptor instead.
func (*BuildMatchRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{10}
}

func (x *BuildMatchRequest) GetEntries() []*MatchmakerEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type BuildMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label []byte `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *BuildMatchResponse) Reset() {
	*x = BuildMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMatchResponse) ProtoMessage() {}

func (x *BuildMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMatchResponse.ProtoReflect.Descriptor instead.
func (*BuildMatchResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{11}
}

func (x *BuildMatchResponse) GetLabel() []byte {
	if x != nil {
		return x.Label
	}
	return nil
}

type CheckForceUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginSessionId string `protobuf:"bytes,1,opt,name=login_session_id,json=loginSessionId,proto3" json:"login_session_id,omitempty"`
}

func (x *CheckForceUserRequest) Reset() {
	*x = CheckForceUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckForceUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckForceUserRequest) ProtoMessage() {}

func (x *CheckForceUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckForceUserRequest.ProtoReflect.Descriptor instead.
func (*CheckForceUserRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{12}
}

func (x *CheckForceUserRequest) GetLoginSessionId() string {
	if x != nil {
		return x.LoginSessionId
	}
	return ""
}

type CheckForceUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CheckForceUserResponse) Reset() {
	*x = CheckForceUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckForceUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckForceUserResponse) ProtoMessage() {}

func (x *CheckForceUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckForceUserResponse.ProtoReflect.Descriptor instead.
func (*CheckForceUserResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{13}
}

func (x *CheckForceUserResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type CombatLoadout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CombatWeapon       string `protobuf:"bytes,1,opt,name=combat_weapon,json=combatWeapon,proto3" json:"combat_weapon,omitempty"`
	CombatGrenade      string `protobuf:"bytes,2,opt,name=combat_grenade,json=combatGrenade,proto3" json:"combat_grenade,omitempty"`
	CombatDominantHand uint32 `protobuf:"varint,3,opt,name=combat_dominant_hand,json=combatDominantHand,proto3" json:"combat_dominant_hand,omitempty"`
	CombatAbility      string `protobuf:"bytes,4,opt,name=combat_ability,json=combatAbility,proto3" json:"combat_ability,omitempty"`
}

func (x *CombatLoadout) Reset() {
	*x = CombatLoadout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CombatLoadout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombatLoadout) ProtoMessage() {}

func (x *CombatLoadout) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CombatLoadout.ProtoReflect.Descriptor instead.
func (*CombatLoadout) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{14}
}

func (x *CombatLoadout) GetCombatWeapon() string {
	if x != nil {
		return x.CombatWeapon
	}
	return ""
}

func (x *CombatLoadout) GetCombatGrenade() string {
	if x != nil {
		return x.CombatGrenade
	}
	return ""
}

func (x *CombatLoadout) GetCombatDominantHand() uint32 {
	if x != nil {
		return x.CombatDominantHand
	}
	return 0
}

func (x *CombatLoadout) GetCombatAbility() string {
	if x != nil {
		return x.CombatAbility
	}
	return ""
}

type CosmeticLoadout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Banner         string `protobuf:"bytes,1,opt,name=banner,proto3" json:"banner,omitempty"`
	Booster        string `protobuf:"bytes,2,opt,name=booster,proto3" json:"booster,omitempty"`
	Bracer         string `protobuf:"bytes,3,opt,name=bracer,proto3" json:"bracer,omitempty"`
	Chassis        string `protobuf:"bytes,4,opt,name=chassis,proto3" json:"chassis,omitempty"`
	Decal          string `protobuf:"bytes,5,opt,name=decal,proto3" json:"decal,omitempty"`
	DecalBody      string `protobuf:"bytes,6,opt,name=decal_body,json=decalBody,proto3" json:"decal_body,omitempty"`
	Emissive       string `protobuf:"bytes,7,opt,name=emissive,proto3" json:"emissive,omitempty"`
	Emote          string `protobuf:"bytes,8,opt,name=emote,proto3" json:"emote,omitempty"`
	GoalFx         string `protobuf:"bytes,9,opt,name=goal_fx,json=goalFx,proto3" json:"goal_fx,omitempty"`
	Medal          string `protobuf:"bytes,10,opt,name=medal,proto3" json:"medal,omitempty"`
	Pattern        string `protobuf:"bytes,11,opt,name=pattern,proto3" json:"pattern,omitempty"`
	PatternBody    string `protobuf:"bytes,12,opt,name=pattern_body,json=patternBody,proto3" json:"pattern_body,omitempty"`
	Pip            string `protobuf:"bytes,13,opt,name=pip,proto3" json:"pip,omitempty"`
	SecondEmote    string `protobuf:"bytes,14,opt,name=second_emote,json=secondEmote,proto3" json:"second_emote,omitempty"`
	Tag            string `protobuf:"bytes,15,opt,name=tag,proto3" json:"tag,omitempty"`
	Tint           string `protobuf:"bytes,16,opt,name=tint,proto3" json:"tint,omitempty"`
	TintAlignmentA string `protobuf:"bytes,17,opt,name=tint_alignment_a,json=tintAlignmentA,proto3" json:"tint_alignment_a,omitempty"`
	TintAlignmentB string `protobuf:"bytes,18,opt,name=tint_alignment_b,json=tintAlignmentB,proto3" json:"tint_alignment_b,omitempty"`
	TintBody       string `protobuf:"bytes,19,opt,name=tint_body,json=tintBody,proto3" json:"tint_body,omitempty"`
	Title          string `protobuf:"bytes,20,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *CosmeticLoadout) Reset() {
	*x = CosmeticLoadout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CosmeticLoadout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosmeticLoadout) ProtoMessage() {}

func (x *CosmeticLoadout) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CosmeticLoadout.ProtoReflect.Descriptor instead.
func (*CosmeticLoadout) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{15}
}

func (x *CosmeticLoadout) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *CosmeticLoadout) GetBooster() string {
	if x != nil {
		return x.Booster
	}
	return ""
}

func (x *CosmeticLoadout) GetBracer() string {
	if x != nil {
		return x.Bracer
	}
	return ""
}

func (x *CosmeticLoadout) GetChassis() string {
	if x != nil {
		return x.Chassis
	}
	return ""
}

func (x *CosmeticLoadout) GetDecal() string {
	if x != nil {
		return x.Decal
	}
	return ""
}

func (x *CosmeticLoadout) GetDecalBody() string {
	if x != nil {
		return x.DecalBody
	}
	return ""
}

func (x *CosmeticLoadout) GetEmissive() string {
	if x != nil {
		return x.Emissive
	}
	return ""
}

func (x *CosmeticLoadout) GetEmote() string {
	if x != nil {
		return x.Emote
	}
	return ""
}

func (x *CosmeticLoadout) GetGoalFx() string {
	if x != nil {
		return x.GoalFx
	}
	return ""
}

func (x *CosmeticLoadout) GetMedal() string {
	if x != nil {
		return x.Medal
	}
	return ""
}

func (x *CosmeticLoadout) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *CosmeticLoadout) GetPatternBody() string {
	if x != nil {
		return x.PatternBody
	}
	return ""
}

func (x *CosmeticLoadout) GetPip() string {
	if x != nil {
		return x.Pip
	}
	return ""
}

func (x *CosmeticLoadout) GetSecondEmote() string {
	if x != nil {
		return x.SecondEmote
	}
	return ""
}

func (x *CosmeticLoadout) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *CosmeticLoadout) GetTint() string {
	if x != nil {
		return x.Tint
	}
	return ""
}

func (x *CosmeticLoadout) GetTintAlignmentA() string {
	if x != nil {
		return x.TintAlignmentA
	}
	return ""
}

func (x *CosmeticLoadout) GetTintAlignmentB() string {
	if x != nil {
		return x.TintAlignmentB
	}
	return ""
}

func (x *CosmeticLoadout) GetTintBody() string {
	if x != nil {
		return x.TintBody
	}
	return ""
}

func (x *CosmeticLoadout) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type DiscordSignInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code             string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	OauthRedirectUrl string `protobuf:"bytes,2,opt,name=oauth_redirect_url,json=oauthRedirectUrl,proto3" json:"oauth_redirect_url,omitempty"`
}

func (x *DiscordSignInRequest) Reset() {
	*x = DiscordSignInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscordSignInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscordSignInRequest) ProtoMessage() {}

func (x *DiscordSignInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscordSignInRequest.ProtoReflect.Descriptor instead.
func (*DiscordSignInRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{16}
}

func (x *DiscordSignInRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DiscordSignInRequest) GetOauthRedirectUrl() string {
	if x != nil {
		return x.OauthRedirectUrl
	}
	return ""
}

type DiscordSignInResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken    string `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	DiscordUsername string `protobuf:"bytes,2,opt,name=discord_username,json=discordUsername,proto3" json:"discord_username,omitempty"`
}

func (x *DiscordSignInResponse) Reset() {
	*x = DiscordSignInResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscordSignInResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscordSignInResponse) ProtoMessage() {}

func (x *DiscordSignInResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscordSignInResponse.ProtoReflect.Descriptor instead.
func (*DiscordSignInResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{17}
}

func (x *DiscordSignInResponse) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *DiscordSignInResponse) GetDiscordUsername() string {
	if x != nil {
		return x.DiscordUsername
	}
	return ""
}

type DisplayNameMatchItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string                 `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	UserId      string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId     string                 `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *DisplayNameMatchItem) Reset() {
	*x = DisplayNameMatchItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayNameMatchItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayNameMatchItem) ProtoMessage() {}

func (x *DisplayNameMatchItem) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayNameMatchItem.ProtoReflect.Descriptor instead.
func (*DisplayNameMatchItem) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{18}
}

func (x *DisplayNameMatchItem) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *DisplayNameMatchItem) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DisplayNameMatchItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *DisplayNameMatchItem) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalIp string `protobuf:"bytes,1,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	Port       int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{19}
}

func (x *Endpoint) GetExternalIp() string {
	if x != nil {
		return x.ExternalIp
	}
	return ""
}

func (x *Endpoint) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type EvrMatchPresence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId         string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Username          string                 `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	DisplayName       string                 `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	EvrId             *EvrId                 `protobuf:"bytes,5,opt,name=evr_id,json=evrId,proto3" json:"evr_id,omitempty"`
	TeamIndex         int32                  `protobuf:"varint,6,opt,name=team_index,json=teamIndex,proto3" json:"team_index,omitempty"`
	RoleAlignment     int32                  `protobuf:"varint,7,opt,name=role_alignment,json=roleAlignment,proto3" json:"role_alignment,omitempty"`
	PartyId           string                 `protobuf:"bytes,8,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	SupportedFeatures []string               `protobuf:"bytes,9,rep,name=supported_features,json=supportedFeatures,proto3" json:"supported_features,omitempty"`
	MatchmakingAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=matchmaking_at,json=matchmakingAt,proto3" json:"matchmaking_at,omitempty"`
	ClientIp          string                 `protobuf:"bytes,11,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	PingMillis        int32                  `protobuf:"varint,12,opt,name=ping_millis,json=pingMillis,proto3" json:"ping_millis,omitempty"`
}

func (x *EvrMatchPresence) Reset() {
	*x = EvrMatchPresence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvrMatchPresence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvrMatchPresence) ProtoMessage() {}

func (x *EvrMatchPresence) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvrMatchPresence.ProtoReflect.Descriptor instead.
func (*EvrMatchPresence) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{20}
}

func (x *EvrMatchPresence) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EvrMatchPresence) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *EvrMatchPresence) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *EvrMatchPresence) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *EvrMatchPresence) GetEvrId() *EvrId {
	if x != nil {
		return x.EvrId
	}
	return nil
}

func (x *EvrMatchPresence) GetTeamIndex() int32 {
	if x != nil {
		return x.TeamIndex
	}
	return 0
}

func (x *EvrMatchPresence) GetRoleAlignment() int32 {
	if x != nil {
		return x.RoleAlignment
	}
	return 0
}

func (x *EvrMatchPresence) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *EvrMatchPresence) GetSupportedFeatures() []string {
	if x != nil {
		return x.SupportedFeatures
	}
	return nil
}

func (x *EvrMatchPresence) GetMatchmakingAt() *timestamppb.Timestamp {
	if x != nil {
		return x.MatchmakingAt
	}
	return nil
}

func (x *EvrMatchPresence) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *EvrMatchPresence) GetPingMillis() int32 {
	if x != nil {
		return x.PingMillis
	}
	return 0
}

type GameServerPresence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string    `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId    string    `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Username     string    `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	OperatorId   string    `protobuf:"bytes,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	GroupIds     []string  `protobuf:"bytes,5,rep,name=group_ids,json=groupIds,proto3" json:"group_ids,omitempty"`
	Region       string    `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	EndpointJson string    `protobuf:"bytes,7,opt,name=endpoint_json,json=endpointJson,proto3" json:"endpoint_json,omitempty"`
	Endpoint     *Endpoint `protobuf:"bytes,8,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Features     []string  `protobuf:"bytes,9,rep,name=features,proto3" json:"features,omitempty"`
	AppId        uint64    `protobuf:"varint,10,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ServerId     string    `protobuf:"bytes,11,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Latitude     float32   `protobuf:"fixed32,12,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude    float32   `protobuf:"fixed32,13,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *GameServerPresence) Reset() {
	*x = GameServerPresence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameServerPresence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerPresence) ProtoMessage() {}

func (x *GameServerPresence) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerPresence.ProtoReflect.Descriptor instead.
func (*GameServerPresence) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{21}
}

func (x *GameServerPresence) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GameServerPresence) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GameServerPresence) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GameServerPresence) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *GameServerPresence) GetGroupIds() []string {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

func (x *GameServerPresence) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GameServerPresence) GetEndpointJson() string {
	if x != nil {
		return x.EndpointJson
	}
	return ""
}

func (x *GameServerPresence) GetEndpoint() *Endpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *GameServerPresence) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *GameServerPresence) GetAppId() uint64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *GameServerPresence) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *GameServerPresence) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GameServerPresence) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type GameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundClock *RoundClock `protobuf:"bytes,1,opt,name=round_clock,json=roundClock,proto3" json:"round_clock,omitempty"`
	MatchOver  bool        `protobuf:"varint,2,opt,name=match_over,json=matchOver,proto3" json:"match_over,omitempty"`
}

func (x *GameState) Reset() {
	*x = GameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState) ProtoMessage() {}

func (x *GameState) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState.ProtoReflect.Descriptor instead.
func (*GameState) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{22}
}

func (x *GameState) GetRoundClock() *RoundClock {
	if x != nil {
		return x.RoundClock
	}
	return nil
}

func (x *GameState) GetMatchOver() bool {
	if x != nil {
		return x.MatchOver
	}
	return false
}

type ImportLoadoutsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loadouts []*CosmeticLoadout `protobuf:"bytes,1,rep,name=loadouts,proto3" json:"loadouts,omitempty"`
}

func (x *ImportLoadoutsRequest) Reset() {
	*x = ImportLoadoutsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportLoadoutsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportLoadoutsRequest) ProtoMessage() {}

func (x *ImportLoadoutsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportLoadoutsRequest.ProtoReflect.Descriptor instead.
func (*ImportLoadoutsRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{23}
}

func (x *ImportLoadoutsRequest) GetLoadouts() []*CosmeticLoadout {
	if x != nil {
		return x.Loadouts
	}
	return nil
}

type ImportLoadoutsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadoutIds []string `protobuf:"bytes,1,rep,name=loadout_ids,json=loadoutIds,proto3" json:"loadout_ids,omitempty"`
}

func (x *ImportLoadoutsResponse) Reset() {
	*x = ImportLoadoutsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportLoadoutsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportLoadoutsResponse) ProtoMessage() {}

func (x *ImportLoadoutsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportLoadoutsResponse.ProtoReflect.Descriptor instead.
func (*ImportLoadoutsResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{24}
}

func (x *ImportLoadoutsResponse) GetLoadoutIds() []string {
	if x != nil {
		return x.LoadoutIds
	}
	return nil
}

type KickPlayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *KickPlayerRequest) Reset() {
	*x = KickPlayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickPlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickPlayerRequest) ProtoMessage() {}

func (x *KickPlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickPlayerRequest.ProtoReflect.Descriptor instead.
func (*KickPlayerRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{25}
}

func (x *KickPlayerRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type KickPlayerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionIds []string `protobuf:"bytes,1,rep,name=session_ids,json=sessionIds,proto3" json:"session_ids,omitempty"`
}

func (x *KickPlayerResponse) Reset() {
	*x = KickPlayerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickPlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickPlayerResponse) ProtoMessage() {}

func (x *KickPlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickPlayerResponse.ProtoReflect.Descriptor instead.
func (*KickPlayerResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{26}
}

func (x *KickPlayerResponse) GetSessionIds() []string {
	if x != nil {
		return x.SessionIds
	}
	return nil
}

type LeaderboardHaystackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId        string  `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	OwnerDiscordId string  `protobuf:"bytes,2,opt,name=owner_discord_id,json=ownerDiscordId,proto3" json:"owner_discord_id,omitempty"`
	LeaderboardId  string  `protobuf:"bytes,3,opt,name=leaderboard_id,json=leaderboardId,proto3" json:"leaderboard_id,omitempty"`
	GuildId        string  `protobuf:"bytes,4,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	GroupId        string  `protobuf:"bytes,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GameMode       *Symbol `protobuf:"bytes,6,opt,name=game_mode,json=gameMode,proto3" json:"game_mode,omitempty"`
	ResetSchedule  string  `protobuf:"bytes,7,opt,name=reset_schedule,json=resetSchedule,proto3" json:"reset_schedule,omitempty"`
	StatName       string  `protobuf:"bytes,8,opt,name=stat_name,json=statName,proto3" json:"stat_name,omitempty"`
	Limit          int32   `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
	Cursor         string  `protobuf:"bytes,10,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *LeaderboardHaystackRequest) Reset() {
	*x = LeaderboardHaystackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardHaystackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardHaystackRequest) ProtoMessage() {}

func (x *LeaderboardHaystackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardHaystackRequest.ProtoReflect.Descriptor instead.
func (*LeaderboardHaystackRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{27}
}

func (x *LeaderboardHaystackRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *LeaderboardHaystackRequest) GetOwnerDiscordId() string {
	if x != nil {
		return x.OwnerDiscordId
	}
	return ""
}

func (x *LeaderboardHaystackRequest) GetLeaderboardId() string {
	if x != nil {
		return x.LeaderboardId
	}
	return ""
}

func (x *LeaderboardHaystackRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *LeaderboardHaystackRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *LeaderboardHaystackRequest) GetGameMode() *Symbol {
	if x != nil {
		return x.GameMode
	}
	return nil
}

func (x *LeaderboardHaystackRequest) GetResetSchedule() string {
	if x != nil {
		return x.ResetSchedule
	}
	return ""
}

func (x *LeaderboardHaystackRequest) GetStatName() string {
	if x != nil {
		return x.StatName
	}
	return ""
}

func (x *LeaderboardHaystackRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LeaderboardHaystackRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type LeaderboardHaystackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevCursor   string                       `protobuf:"bytes,1,opt,name=prev_cursor,json=prevCursor,proto3" json:"prev_cursor,omitempty"`
	NextCursor   string                       `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	RankCount    int64                        `protobuf:"varint,3,opt,name=rank_count,json=rankCount,proto3" json:"rank_count,omitempty"`
	OwnerRecords []*LeaderboardHaystackRecord `protobuf:"bytes,4,rep,name=owner_records,json=ownerRecords,proto3" json:"owner_records,omitempty"`
	Records      []*LeaderboardHaystackRecord `protobuf:"bytes,5,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *LeaderboardHaystackResponse) Reset() {
	*x = LeaderboardHaystackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardHaystackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardHaystackResponse) ProtoMessage() {}

func (x *LeaderboardHaystackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardHaystackResponse.ProtoReflect.Descriptor instead.
func (*LeaderboardHaystackResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{28}
}

func (x *LeaderboardHaystackResponse) GetPrevCursor() string {
	if x != nil {
		return x.PrevCursor
	}
	return ""
}

func (x *LeaderboardHaystackResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *LeaderboardHaystackResponse) GetRankCount() int64 {
	if x != nil {
		return x.RankCount
	}
	return 0
}

func (x *LeaderboardHaystackResponse) GetOwnerRecords() []*LeaderboardHaystackRecord {
	if x != nil {
		return x.OwnerRecords
	}
	return nil
}

func (x *LeaderboardHaystackResponse) GetRecords() []*LeaderboardHaystackRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type LeaderboardHaystackRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	OwnerId     string `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Rank        int64  `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	Score       int64  `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	Subscore    int64  `protobuf:"varint,5,opt,name=subscore,proto3" json:"subscore,omitempty"`
	NumScore    int32  `protobuf:"varint,6,opt,name=num_score,json=numScore,proto3" json:"num_score,omitempty"`
	CreateTime  int64  `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime  int64  `protobuf:"varint,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	ExpiryTime  int64  `protobuf:"varint,9,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	Metadata    []byte `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *LeaderboardHaystackRecord) Reset() {
	*x = LeaderboardHaystackRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardHaystackRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardHaystackRecord) ProtoMessage() {}

func (x *LeaderboardHaystackRecord) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardHaystackRecord.ProtoReflect.Descriptor instead.
func (*LeaderboardHaystackRecord) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{29}
}

func (x *LeaderboardHaystackRecord) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *LeaderboardHaystackRecord) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *LeaderboardHaystackRecord) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *LeaderboardHaystackRecord) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *LeaderboardHaystackRecord) GetSubscore() int64 {
	if x != nil {
		return x.Subscore
	}
	return 0
}

func (x *LeaderboardHaystackRecord) GetNumScore() int32 {
	if x != nil {
		return x.NumScore
	}
	return 0
}

func (x *LeaderboardHaystackRecord) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *LeaderboardHaystackRecord) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *LeaderboardHaystackRecord) GetExpiryTime() int64 {
	if x != nil {
		return x.ExpiryTime
	}
	return 0
}

func (x *LeaderboardHaystackRecord) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type LeaderboardRecordsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderboardId string  `protobuf:"bytes,1,opt,name=leaderboard_id,json=leaderboardId,proto3" json:"leaderboard_id,omitempty"`
	GuildId       string  `protobuf:"bytes,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	GroupId       string  `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Mode          *Symbol `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	StatName      string  `protobuf:"bytes,5,opt,name=stat_name,json=statName,proto3" json:"stat_name,omitempty"`
	ResetSchedule string  `protobuf:"bytes,6,opt,name=reset_schedule,json=resetSchedule,proto3" json:"reset_schedule,omitempty"`
	FromRank      int64   `protobuf:"varint,7,opt,name=from_rank,json=fromRank,proto3" json:"from_rank,omitempty"`
	Limit         int32   `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	Cursor        string  `protobuf:"bytes,9,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *LeaderboardRecordsListRequest) Reset() {
	*x = LeaderboardRecordsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardRecordsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardRecordsListRequest) ProtoMessage() {}

func (x *LeaderboardRecordsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardRecordsListRequest.ProtoReflect.Descriptor instead.
func (*LeaderboardRecordsListRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{30}
}

func (x *LeaderboardRecordsListRequest) GetLeaderboardId() string {
	if x != nil {
		return x.LeaderboardId
	}
	return ""
}

func (x *LeaderboardRecordsListRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *LeaderboardRecordsListRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *LeaderboardRecordsListRequest) GetMode() *Symbol {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *LeaderboardRecordsListRequest) GetStatName() string {
	if x != nil {
		return x.StatName
	}
	return ""
}

func (x *LeaderboardRecordsListRequest) GetResetSchedule() string {
	if x != nil {
		return x.ResetSchedule
	}
	return ""
}

func (x *LeaderboardRecordsListRequest) GetFromRank() int64 {
	if x != nil {
		return x.FromRank
	}
	return 0
}

func (x *LeaderboardRecordsListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LeaderboardRecordsListRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type LeaderboardRecordsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderboardId string                        `protobuf:"bytes,1,opt,name=leaderboard_id,json=leaderboardId,proto3" json:"leaderboard_id,omitempty"`
	NextCursor    string                        `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	PrevCursor    string                        `protobuf:"bytes,3,opt,name=prev_cursor,json=prevCursor,proto3" json:"prev_cursor,omitempty"`
	Records       []*LeaderboardRecordsListItem `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *LeaderboardRecordsListResponse) Reset() {
	*x = LeaderboardRecordsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardRecordsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardRecordsListResponse) ProtoMessage() {}

func (x *LeaderboardRecordsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardRecordsListResponse.ProtoReflect.Descriptor instead.
func (*LeaderboardRecordsListResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{31}
}

func (x *LeaderboardRecordsListResponse) GetLeaderboardId() string {
	if x != nil {
		return x.LeaderboardId
	}
	return ""
}

func (x *LeaderboardRecordsListResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *LeaderboardRecordsListResponse) GetPrevCursor() string {
	if x != nil {
		return x.PrevCursor
	}
	return ""
}

func (x *LeaderboardRecordsListResponse) GetRecords() []*LeaderboardRecordsListItem {
	if x != nil {
		return x.Records
	}
	return nil
}

type LeaderboardRecordsListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId    string                 `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Username   string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Rank       int64                  `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	Score      int64                  `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	Subscore   int64                  `protobuf:"varint,5,opt,name=subscore,proto3" json:"subscore,omitempty"`
	NumScore   int32                  `protobuf:"varint,6,opt,name=num_score,json=numScore,proto3" json:"num_score,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	ExpiryTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	Metadata   []byte                 `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *LeaderboardRecordsListItem) Reset() {
	*x = LeaderboardRecordsListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardRecordsListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardRecordsListItem) ProtoMessage() {}

func (x *LeaderboardRecordsListItem) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardRecordsListItem.ProtoReflect.Descriptor instead.
func (*LeaderboardRecordsListItem) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{32}
}

func (x *LeaderboardRecordsListItem) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *LeaderboardRecordsListItem) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LeaderboardRecordsListItem) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *LeaderboardRecordsListItem) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *LeaderboardRecordsListItem) GetSubscore() int64 {
	if x != nil {
		return x.Subscore
	}
	return 0
}

func (x *LeaderboardRecordsListItem) GetNumScore() int32 {
	if x != nil {
		return x.NumScore
	}
	return 0
}

func (x *LeaderboardRecordsListItem) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *LeaderboardRecordsListItem) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *LeaderboardRecordsListItem) GetExpiryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

func (x *LeaderboardRecordsListItem) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type LinkDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken string `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	LinkCode     string `protobuf:"bytes,2,opt,name=link_code,json=linkCode,proto3" json:"link_code,omitempty"`
}

func (x *LinkDeviceRequest) Reset() {
	*x = LinkDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkDeviceRequest) ProtoMessage() {}

func (x *LinkDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkDeviceRequest.ProtoReflect.Descriptor instead.
func (*LinkDeviceRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{33}
}

func (x *LinkDeviceRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *LinkDeviceRequest) GetLinkCode() string {
	if x != nil {
		return x.LinkCode
	}
	return ""
}

type LinkDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *LinkDeviceResponse) Reset() {
	*x = LinkDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkDeviceResponse) ProtoMessage() {}

func (x *LinkDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkDeviceResponse.ProtoReflect.Descriptor instead.
func (*LinkDeviceResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{34}
}

func (x *LinkDeviceResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type LinkUserIdDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LinkCode string `protobuf:"bytes,2,opt,name=link_code,json=linkCode,proto3" json:"link_code,omitempty"`
}

func (x *LinkUserIdDeviceRequest) Reset() {
	*x = LinkUserIdDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkUserIdDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkUserIdDeviceRequest) ProtoMessage() {}

func (x *LinkUserIdDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkUserIdDeviceRequest.ProtoReflect.Descriptor instead.
func (*LinkUserIdDeviceRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{35}
}

func (x *LinkUserIdDeviceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LinkUserIdDeviceRequest) GetLinkCode() string {
	if x != nil {
		return x.LinkCode
	}
	return ""
}

type LinkUserIdDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *LinkUserIdDeviceResponse) Reset() {
	*x = LinkUserIdDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkUserIdDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkUserIdDeviceResponse) ProtoMessage() {}

func (x *LinkUserIdDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkUserIdDeviceResponse.ProtoReflect.Descriptor instead.
func (*LinkUserIdDeviceResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{36}
}

func (x *LinkUserIdDeviceResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type LinkingAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LinkingAppRequest) Reset() {
	*x = LinkingAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkingAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkingAppRequest) ProtoMessage() {}

func (x *LinkingAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkingAppRequest.ProtoReflect.Descriptor instead.
func (*LinkingAppRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{37}
}

type LinkingAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LinkingAppResponse) Reset() {
	*x = LinkingAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkingAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkingAppResponse) ProtoMessage() {}

func (x *LinkingAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkingAppResponse.ProtoReflect.Descriptor instead.
func (*LinkingAppResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{38}
}

func (x *LinkingAppResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type LobbySessionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode             *Symbol  `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	Level            *Symbol  `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	SessionId        string   `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	PartyId          string   `protobuf:"bytes,4,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	PartySize        int32    `protobuf:"varint,5,opt,name=party_size,json=partySize,proto3" json:"party_size,omitempty"`
	TeamIndex        int32    `protobuf:"varint,6,opt,name=team_index,json=teamIndex,proto3" json:"team_index,omitempty"`
	VersionLock      int64    `protobuf:"varint,7,opt,name=version_lock,json=versionLock,proto3" json:"version_lock,omitempty"`
	RequiredFeatures []string `protobuf:"bytes,8,rep,name=required_features,json=requiredFeatures,proto3" json:"required_features,omitempty"`
}

func (x *LobbySessionParameters) Reset() {
	*x = LobbySessionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LobbySessionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbySessionParameters) ProtoMessage() {}

func (x *LobbySessionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbySessionParameters.ProtoReflect.Descriptor instead.
func (*LobbySessionParameters) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{39}
}

func (x *LobbySessionParameters) GetMode() *Symbol {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *LobbySessionParameters) GetLevel() *Symbol {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *LobbySessionParameters) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *LobbySessionParameters) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *LobbySessionParameters) GetPartySize() int32 {
	if x != nil {
		return x.PartySize
	}
	return 0
}

func (x *LobbySessionParameters) GetTeamIndex() int32 {
	if x != nil {
		return x.TeamIndex
	}
	return 0
}

func (x *LobbySessionParameters) GetVersionLock() int64 {
	if x != nil {
		return x.VersionLock
	}
	return 0
}

func (x *LobbySessionParameters) GetRequiredFeatures() []string {
	if x != nil {
		return x.RequiredFeatures
	}
	return nil
}

type MatchGoal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamIndex      int32   `protobuf:"varint,1,opt,name=team_index,json=teamIndex,proto3" json:"team_index,omitempty"`
	PointAmount    float32 `protobuf:"fixed32,2,opt,name=point_amount,json=pointAmount,proto3" json:"point_amount,omitempty"`
	DiscSpeed      string  `protobuf:"bytes,3,opt,name=disc_speed,json=discSpeed,proto3" json:"disc_speed,omitempty"`
	AssistEvrId    string  `protobuf:"bytes,4,opt,name=assist_evr_id,json=assistEvrId,proto3" json:"assist_evr_id,omitempty"`
	PersonScored   string  `protobuf:"bytes,5,opt,name=person_scored,json=personScored,proto3" json:"person_scored,omitempty"`
	DistanceThrown string  `protobuf:"bytes,6,opt,name=distance_thrown,json=distanceThrown,proto3" json:"distance_thrown,omitempty"`
}

func (x *MatchGoal) Reset() {
	*x = MatchGoal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchGoal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchGoal) ProtoMessage() {}

func (x *MatchGoal) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchGoal.ProtoReflect.Descriptor instead.
func (*MatchGoal) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{40}
}

func (x *MatchGoal) GetTeamIndex() int32 {
	if x != nil {
		return x.TeamIndex
	}
	return 0
}

func (x *MatchGoal) GetPointAmount() float32 {
	if x != nil {
		return x.PointAmount
	}
	return 0
}

func (x *MatchGoal) GetDiscSpeed() string {
	if x != nil {
		return x.DiscSpeed
	}
	return ""
}

func (x *MatchGoal) GetAssistEvrId() string {
	if x != nil {
		return x.AssistEvrId
	}
	return ""
}

func (x *MatchGoal) GetPersonScored() string {
	if x != nil {
		return x.PersonScored
	}
	return ""
}

func (x *MatchGoal) GetDistanceThrown() string {
	if x != nil {
		return x.DistanceThrown
	}
	return ""
}

type MatchLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	StartTime        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	LockedAt         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=locked_at,json=lockedAt,proto3" json:"locked_at,omitempty"`
	GameServer       *GameServerPresence    `protobuf:"bytes,5,opt,name=game_server,json=gameServer,proto3" json:"game_server,omitempty"`
	Open             bool                   `protobuf:"varint,6,opt,name=open,proto3" json:"open,omitempty"`
	LobbyType        string                 `protobuf:"bytes,7,opt,name=lobby_type,json=lobbyType,proto3" json:"lobby_type,omitempty"`
	Mode             *Symbol                `protobuf:"bytes,8,opt,name=mode,proto3" json:"mode,omitempty"`
	Level            *Symbol                `protobuf:"bytes,9,opt,name=level,proto3" json:"level,omitempty"`
	MaxSize          int32                  `protobuf:"varint,10,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	TeamSize         int32                  `protobuf:"varint,11,opt,name=team_size,json=teamSize,proto3" json:"team_size,omitempty"`
	PlayerLimit      int32                  `protobuf:"varint,12,opt,name=player_limit,json=playerLimit,proto3" json:"player_limit,omitempty"`
	RequiredFeatures []string               `protobuf:"bytes,13,rep,name=required_features,json=requiredFeatures,proto3" json:"required_features,omitempty"`
	Players          []*PlayerInfo          `protobuf:"bytes,14,rep,name=players,proto3" json:"players,omitempty"`
	GameState        *GameState             `protobuf:"bytes,15,opt,name=game_state,json=gameState,proto3" json:"game_state,omitempty"`
	SessionSettings  *SessionSettings       `protobuf:"bytes,16,opt,name=session_settings,json=sessionSettings,proto3" json:"session_settings,omitempty"`
	GroupId          string                 `protobuf:"bytes,17,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	SpawnedBy        string                 `protobuf:"bytes,18,opt,name=spawned_by,json=spawnedBy,proto3" json:"spawned_by,omitempty"`
	TeamAlignments   map[string]int32       `protobuf:"bytes,19,rep,name=team_alignments,json=teamAlignments,proto3" json:"team_alignments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	LevelLoaded      bool                   `protobuf:"varint,20,opt,name=level_loaded,json=levelLoaded,proto3" json:"level_loaded,omitempty"`
	TerminateTick    int64                  `protobuf:"varint,21,opt,name=terminate_tick,json=terminateTick,proto3" json:"terminate_tick,omitempty"`
	RankPercentile   float64                `protobuf:"fixed64,22,opt,name=rank_percentile,json=rankPercentile,proto3" json:"rank_percentile,omitempty"`
}

func (x *MatchLabel) Reset() {
	*x = MatchLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchLabel) ProtoMessage() {}

func (x *MatchLabel) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchLabel.ProtoReflect.Descriptor instead.
func (*MatchLabel) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{41}
}

func (x *MatchLabel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MatchLabel) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MatchLabel) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *MatchLabel) GetLockedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LockedAt
	}
	return nil
}

func (x *MatchLabel) GetGameServer() *GameServerPresence {
	if x != nil {
		return x.GameServer
	}
	return nil
}

func (x *MatchLabel) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *MatchLabel) GetLobbyType() string {
	if x != nil {
		return x.LobbyType
	}
	return ""
}

func (x *MatchLabel) GetMode() *Symbol {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *MatchLabel) GetLevel() *Symbol {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *MatchLabel) GetMaxSize() int32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *MatchLabel) GetTeamSize() int32 {
	if x != nil {
		return x.TeamSize
	}
	return 0
}

func (x *MatchLabel) GetPlayerLimit() int32 {
	if x != nil {
		return x.PlayerLimit
	}
	return 0
}

func (x *MatchLabel) GetRequiredFeatures() []string {
	if x != nil {
		return x.RequiredFeatures
	}
	return nil
}

func (x *MatchLabel) GetPlayers() []*PlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *MatchLabel) GetGameState() *GameState {
	if x != nil {
		return x.GameState
	}
	return nil
}

func (x *MatchLabel) GetSessionSettings() *SessionSettings {
	if x != nil {
		return x.SessionSettings
	}
	return nil
}

func (x *MatchLabel) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *MatchLabel) GetSpawnedBy() string {
	if x != nil {
		return x.SpawnedBy
	}
	return ""
}

func (x *MatchLabel) GetTeamAlignments() map[string]int32 {
	if x != nil {
		return x.TeamAlignments
	}
	return nil
}

func (x *MatchLabel) GetLevelLoaded() bool {
	if x != nil {
		return x.LevelLoaded
	}
	return false
}

func (x *MatchLabel) GetTerminateTick() int64 {
	if x != nil {
		return x.TerminateTick
	}
	return 0
}

func (x *MatchLabel) GetRankPercentile() float64 {
	if x != nil {
		return x.RankPercentile
	}
	return 0
}

type MatchListPublicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MatchListPublicRequest) Reset() {
	*x = MatchListPublicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchListPublicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchListPublicRequest) ProtoMessage() {}

func (x *MatchListPublicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchListPublicRequest.ProtoReflect.Descriptor instead.
func (*MatchListPublicRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{42}
}

type MatchListPublicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UptimeMins              int64                          `protobuf:"varint,1,opt,name=uptime_mins,json=uptimeMins,proto3" json:"uptime_mins,omitempty"`
	UpdateTime              *timestamppb.Timestamp         `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	LobbySessionCount       int32                          `protobuf:"varint,3,opt,name=lobby_session_count,json=lobbySessionCount,proto3" json:"lobby_session_count,omitempty"`
	GameserverCount         int32                          `protobuf:"varint,4,opt,name=gameserver_count,json=gameserverCount,proto3" json:"gameserver_count,omitempty"`
	PlayerCount             int32                          `protobuf:"varint,5,opt,name=player_count,json=playerCount,proto3" json:"player_count,omitempty"`
	ActiveMatchmakingCounts map[string]*MatchmakingTickets `protobuf:"bytes,6,rep,name=active_matchmaking_counts,json=activeMatchmakingCounts,proto3" json:"active_matchmaking_counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels                  []*MatchLabel                  `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	Gameservers             []*GameServerPresence          `protobuf:"bytes,8,rep,name=gameservers,proto3" json:"gameservers,omitempty"`
}

func (x *MatchListPublicResponse) Reset() {
	*x = MatchListPublicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchListPublicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchListPublicResponse) ProtoMessage() {}

func (x *MatchListPublicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchListPublicResponse.ProtoReflect.Descriptor instead.
func (*MatchListPublicResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{43}
}

func (x *MatchListPublicResponse) GetUptimeMins() int64 {
	if x != nil {
		return x.UptimeMins
	}
	return 0
}

func (x *MatchListPublicResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *MatchListPublicResponse) GetLobbySessionCount() int32 {
	if x != nil {
		return x.LobbySessionCount
	}
	return 0
}

func (x *MatchListPublicResponse) GetGameserverCount() int32 {
	if x != nil {
		return x.GameserverCount
	}
	return 0
}

func (x *MatchListPublicResponse) GetPlayerCount() int32 {
	if x != nil {
		return x.PlayerCount
	}
	return 0
}

func (x *MatchListPublicResponse) GetActiveMatchmakingCounts() map[string]*MatchmakingTickets {
	if x != nil {
		return x.ActiveMatchmakingCounts
	}
	return nil
}

func (x *MatchListPublicResponse) GetLabels() []*MatchLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MatchListPublicResponse) GetGameservers() []*GameServerPresence {
	if x != nil {
		return x.Gameservers
	}
	return nil
}

type MatchmakingTickets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tickets map[string]int32 `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MatchmakingTickets) Reset() {
	*x = MatchmakingTickets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakingTickets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakingTickets) ProtoMessage() {}

func (x *MatchmakingTickets) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakingTickets.ProtoReflect.Descriptor instead.
func (*MatchmakingTickets) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{44}
}

func (x *MatchmakingTickets) GetTickets() map[string]int32 {
	if x != nil {
		return x.Tickets
	}
	return nil
}

type MatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchIds []string `protobuf:"bytes,1,rep,name=match_ids,json=matchIds,proto3" json:"match_ids,omitempty"`
	Query    string   `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *MatchRequest) Reset() {
	*x = MatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRequest) ProtoMessage() {}

func (x *MatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRequest.ProtoReflect.Descriptor instead.
func (*MatchRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{45}
}

func (x *MatchRequest) GetMatchIds() []string {
	if x != nil {
		return x.MatchIds
	}
	return nil
}

func (x *MatchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type MatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemStartTime string   `protobuf:"bytes,1,opt,name=system_start_time,json=systemStartTime,proto3" json:"system_start_time,omitempty"`
	Timestamp       string   `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Labels          [][]byte `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *MatchResponse) Reset() {
	*x = MatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchResponse) ProtoMessage() {}

func (x *MatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchResponse.ProtoReflect.Descriptor instead.
func (*MatchResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{46}
}

func (x *MatchResponse) GetSystemStartTime() string {
	if x != nil {
		return x.SystemStartTime
	}
	return ""
}

func (x *MatchResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *MatchResponse) GetLabels() [][]byte {
	if x != nil {
		return x.Labels
	}
	return nil
}

type MatchmakerCandidatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MatchmakerCandidatesRequest) Reset() {
	*x = MatchmakerCandidatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakerCandidatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakerCandidatesRequest) ProtoMessage() {}

func (x *MatchmakerCandidatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakerCandidatesRequest.ProtoReflect.Descriptor instead.
func (*MatchmakerCandidatesRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{47}
}

type MatchmakerCandidatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidates map[string]*MatchmakerEntryList `protobuf:"bytes,1,rep,name=candidates,proto3" json:"candidates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Matches    map[string]*MatchmakerEntryList `protobuf:"bytes,2,rep,name=matches,proto3" json:"matches,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MatchmakerCandidatesResponse) Reset() {
	*x = MatchmakerCandidatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakerCandidatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakerCandidatesResponse) ProtoMessage() {}

func (x *MatchmakerCandidatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakerCandidatesResponse.ProtoReflect.Descriptor instead.
func (*MatchmakerCandidatesResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{48}
}

func (x *MatchmakerCandidatesResponse) GetCandidates() map[string]*MatchmakerEntryList {
	if x != nil {
		return x.Candidates
	}
	return nil
}

func (x *MatchmakerCandidatesResponse) GetMatches() map[string]*MatchmakerEntryList {
	if x != nil {
		return x.Matches
	}
	return nil
}

type MatchmakerEntryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*MatchmakerEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *MatchmakerEntryList) Reset() {
	*x = MatchmakerEntryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakerEntryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakerEntryList) ProtoMessage() {}

func (x *MatchmakerEntryList) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakerEntryList.ProtoReflect.Descriptor instead.
func (*MatchmakerEntryList) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{49}
}

func (x *MatchmakerEntryList) GetEntries() []*MatchmakerEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type MatchmakerEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string                  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId  string                  `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Username   string                  `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Parameters *LobbySessionParameters `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *MatchmakerEntry) Reset() {
	*x = MatchmakerEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakerEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakerEntry) ProtoMessage() {}

func (x *MatchmakerEntry) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakerEntry.ProtoReflect.Descriptor instead.
func (*MatchmakerEntry) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{50}
}

func (x *MatchmakerEntry) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MatchmakerEntry) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *MatchmakerEntry) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MatchmakerEntry) GetParameters() *LobbySessionParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type MatchmakerExtract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is a complex structure, using Any for now.
	Data *anypb.Any `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MatchmakerExtract) Reset() {
	*x = MatchmakerExtract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakerExtract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakerExtract) ProtoMessage() {}

func (x *MatchmakerExtract) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakerExtract.ProtoReflect.Descriptor instead.
func (*MatchmakerExtract) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{51}
}

func (x *MatchmakerExtract) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type MatchmakerStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MatchmakerStateRequest) Reset() {
	*x = MatchmakerStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakerStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakerStateRequest) ProtoMessage() {}

func (x *MatchmakerStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakerStateRequest.ProtoReflect.Descriptor instead.
func (*MatchmakerStateRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{52}
}

type MatchmakerStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *anypb.Any           `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
	Index []*MatchmakerExtract `protobuf:"bytes,2,rep,name=index,proto3" json:"index,omitempty"`
}

func (x *MatchmakerStateResponse) Reset() {
	*x = MatchmakerStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakerStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakerStateResponse) ProtoMessage() {}

func (x *MatchmakerStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakerStateResponse.ProtoReflect.Descriptor instead.
func (*MatchmakerStateResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{53}
}

func (x *MatchmakerStateResponse) GetStats() *anypb.Any {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *MatchmakerStateResponse) GetIndex() []*MatchmakerExtract {
	if x != nil {
		return x.Index
	}
	return nil
}

type MatchmakerStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *MatchmakerStreamRequest) Reset() {
	*x = MatchmakerStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakerStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakerStreamRequest) ProtoMessage() {}

func (x *MatchmakerStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakerStreamRequest.ProtoReflect.Descriptor instead.
func (*MatchmakerStreamRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{54}
}

func (x *MatchmakerStreamRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type MatchmakerStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Presences []*MatchmakingPresence `protobuf:"bytes,2,rep,name=presences,proto3" json:"presences,omitempty"`
}

func (x *MatchmakerStreamResponse) Reset() {
	*x = MatchmakerStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakerStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakerStreamResponse) ProtoMessage() {}

func (x *MatchmakerStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakerStreamResponse.ProtoReflect.Descriptor instead.
func (*MatchmakerStreamResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{55}
}

func (x *MatchmakerStreamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MatchmakerStreamResponse) GetPresences() []*MatchmakingPresence {
	if x != nil {
		return x.Presences
	}
	return nil
}

type MatchmakingPresence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string                  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId  string                  `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Username   string                  `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Parameters *LobbySessionParameters `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *MatchmakingPresence) Reset() {
	*x = MatchmakingPresence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakingPresence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakingPresence) ProtoMessage() {}

func (x *MatchmakingPresence) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakingPresence.ProtoReflect.Descriptor instead.
func (*MatchmakingPresence) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{56}
}

func (x *MatchmakingPresence) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MatchmakingPresence) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *MatchmakingPresence) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MatchmakingPresence) GetParameters() *LobbySessionParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	TeamIndex   int32  `protobuf:"varint,3,opt,name=team_index,json=teamIndex,proto3" json:"team_index,omitempty"`
	ClientIp    string `protobuf:"bytes,4,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
}

func (x *PlayerInfo) Reset() {
	*x = PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfo) ProtoMessage() {}

func (x *PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfo.ProtoReflect.Descriptor instead.
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{57}
}

func (x *PlayerInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PlayerInfo) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PlayerInfo) GetTeamIndex() int32 {
	if x != nil {
		return x.TeamIndex
	}
	return 0
}

func (x *PlayerInfo) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

type PlayerStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is a complex structure, using Any for now.
	Data *anypb.Any `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PlayerStatistics) Reset() {
	*x = PlayerStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatistics) ProtoMessage() {}

func (x *PlayerStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatistics.ProtoReflect.Descriptor instead.
func (*PlayerStatistics) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{58}
}

func (x *PlayerStatistics) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type PlayerStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId   string  `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GuildId   string  `protobuf:"bytes,3,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	DiscordId string  `protobuf:"bytes,4,opt,name=discord_id,json=discordId,proto3" json:"discord_id,omitempty"`
	Mode      *Symbol `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *PlayerStatisticsRequest) Reset() {
	*x = PlayerStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatisticsRequest) ProtoMessage() {}

func (x *PlayerStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatisticsRequest.ProtoReflect.Descriptor instead.
func (*PlayerStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{59}
}

func (x *PlayerStatisticsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PlayerStatisticsRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *PlayerStatisticsRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *PlayerStatisticsRequest) GetDiscordId() string {
	if x != nil {
		return x.DiscordId
	}
	return ""
}

func (x *PlayerStatisticsRequest) GetMode() *Symbol {
	if x != nil {
		return x.Mode
	}
	return nil
}

type PlayerStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *PlayerStatistics `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *PlayerStatisticsResponse) Reset() {
	*x = PlayerStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatisticsResponse) ProtoMessage() {}

func (x *PlayerStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatisticsResponse.ProtoReflect.Descriptor instead.
func (*PlayerStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{60}
}

func (x *PlayerStatisticsResponse) GetStats() *PlayerStatistics {
	if x != nil {
		return x.Stats
	}
	return nil
}

type PrepareMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mode             *Symbol                `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	Level            *Symbol                `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	RequiredFeatures []string               `protobuf:"bytes,4,rep,name=required_features,json=requiredFeatures,proto3" json:"required_features,omitempty"`
	TeamSize         int32                  `protobuf:"varint,5,opt,name=team_size,json=teamSize,proto3" json:"team_size,omitempty"`
	RoleAlignments   map[string]TeamIndex   `protobuf:"bytes,6,rep,name=role_alignments,json=roleAlignments,proto3" json:"role_alignments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=evr.TeamIndex"`
	GuildId          string                 `protobuf:"bytes,7,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	StartTime        *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	SpawnedBy        string                 `protobuf:"bytes,9,opt,name=spawned_by,json=spawnedBy,proto3" json:"spawned_by,omitempty"`
	Label            *MatchLabel            `protobuf:"bytes,10,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *PrepareMatchRequest) Reset() {
	*x = PrepareMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareMatchRequest) ProtoMessage() {}

func (x *PrepareMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareMatchRequest.ProtoReflect.Descriptor instead.
func (*PrepareMatchRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{61}
}

func (x *PrepareMatchRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PrepareMatchRequest) GetMode() *Symbol {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *PrepareMatchRequest) GetLevel() *Symbol {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *PrepareMatchRequest) GetRequiredFeatures() []string {
	if x != nil {
		return x.RequiredFeatures
	}
	return nil
}

func (x *PrepareMatchRequest) GetTeamSize() int32 {
	if x != nil {
		return x.TeamSize
	}
	return 0
}

func (x *PrepareMatchRequest) GetRoleAlignments() map[string]TeamIndex {
	if x != nil {
		return x.RoleAlignments
	}
	return nil
}

func (x *PrepareMatchRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *PrepareMatchRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *PrepareMatchRequest) GetSpawnedBy() string {
	if x != nil {
		return x.SpawnedBy
	}
	return ""
}

func (x *PrepareMatchRequest) GetLabel() *MatchLabel {
	if x != nil {
		return x.Label
	}
	return nil
}

type PrepareMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label *MatchLabel `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *PrepareMatchResponse) Reset() {
	*x = PrepareMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareMatchResponse) ProtoMessage() {}

func (x *PrepareMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareMatchResponse.ProtoReflect.Descriptor instead.
func (*PrepareMatchResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{62}
}

func (x *PrepareMatchResponse) GetLabel() *MatchLabel {
	if x != nil {
		return x.Label
	}
	return nil
}

type RoundClock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	DurationMillis int64                  `protobuf:"varint,3,opt,name=duration_millis,json=durationMillis,proto3" json:"duration_millis,omitempty"`
}

func (x *RoundClock) Reset() {
	*x = RoundClock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundClock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundClock) ProtoMessage() {}

func (x *RoundClock) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundClock.ProtoReflect.Descriptor instead.
func (*RoundClock) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{63}
}

func (x *RoundClock) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *RoundClock) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *RoundClock) GetDurationMillis() int64 {
	if x != nil {
		return x.DurationMillis
	}
	return 0
}

type ServerScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rtts         []float64 `protobuf:"fixed64,1,rep,packed,name=rtts,proto3" json:"rtts,omitempty"`
	MinRtt       int32     `protobuf:"varint,2,opt,name=min_rtt,json=minRtt,proto3" json:"min_rtt,omitempty"`
	MaxRtt       int32     `protobuf:"varint,3,opt,name=max_rtt,json=maxRtt,proto3" json:"max_rtt,omitempty"`
	ThresholdRtt int32     `protobuf:"varint,4,opt,name=threshold_rtt,json=thresholdRtt,proto3" json:"threshold_rtt,omitempty"`
}

func (x *ServerScoreRequest) Reset() {
	*x = ServerScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerScoreRequest) ProtoMessage() {}

func (x *ServerScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerScoreRequest.ProtoReflect.Descriptor instead.
func (*ServerScoreRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{64}
}

func (x *ServerScoreRequest) GetRtts() []float64 {
	if x != nil {
		return x.Rtts
	}
	return nil
}

func (x *ServerScoreRequest) GetMinRtt() int32 {
	if x != nil {
		return x.MinRtt
	}
	return 0
}

func (x *ServerScoreRequest) GetMaxRtt() int32 {
	if x != nil {
		return x.MaxRtt
	}
	return 0
}

func (x *ServerScoreRequest) GetThresholdRtt() int32 {
	if x != nil {
		return x.ThresholdRtt
	}
	return 0
}

type ServerScoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score float64 `protobuf:"fixed64,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *ServerScoreResponse) Reset() {
	*x = ServerScoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerScoreResponse) ProtoMessage() {}

func (x *ServerScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerScoreResponse.ProtoReflect.Descriptor instead.
func (*ServerScoreResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{65}
}

func (x *ServerScoreResponse) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type ServerScoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiscordIds   []string `protobuf:"bytes,1,rep,name=discord_ids,json=discordIds,proto3" json:"discord_ids,omitempty"`
	MinRtt       int32    `protobuf:"varint,2,opt,name=min_rtt,json=minRtt,proto3" json:"min_rtt,omitempty"`
	MaxRtt       int32    `protobuf:"varint,3,opt,name=max_rtt,json=maxRtt,proto3" json:"max_rtt,omitempty"`
	ThresholdRtt int32    `protobuf:"varint,4,opt,name=threshold_rtt,json=thresholdRtt,proto3" json:"threshold_rtt,omitempty"`
}

func (x *ServerScoresRequest) Reset() {
	*x = ServerScoresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerScoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerScoresRequest) ProtoMessage() {}

func (x *ServerScoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerScoresRequest.ProtoReflect.Descriptor instead.
func (*ServerScoresRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{66}
}

func (x *ServerScoresRequest) GetDiscordIds() []string {
	if x != nil {
		return x.DiscordIds
	}
	return nil
}

func (x *ServerScoresRequest) GetMinRtt() int32 {
	if x != nil {
		return x.MinRtt
	}
	return 0
}

func (x *ServerScoresRequest) GetMaxRtt() int32 {
	if x != nil {
		return x.MaxRtt
	}
	return 0
}

func (x *ServerScoresRequest) GetThresholdRtt() int32 {
	if x != nil {
		return x.ThresholdRtt
	}
	return 0
}

type ServerScoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scores map[string]float64 `protobuf:"bytes,1,rep,name=scores,proto3" json:"scores,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *ServerScoresResponse) Reset() {
	*x = ServerScoresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerScoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerScoresResponse) ProtoMessage() {}

func (x *ServerScoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerScoresResponse.ProtoReflect.Descriptor instead.
func (*ServerScoresResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{67}
}

func (x *ServerScoresResponse) GetScores() map[string]float64 {
	if x != nil {
		return x.Scores
	}
	return nil
}

type ServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Serviceid string `protobuf:"bytes,1,opt,name=serviceid,proto3" json:"serviceid,omitempty"`
	Available bool   `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ServiceStatus) Reset() {
	*x = ServiceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStatus) ProtoMessage() {}

func (x *ServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStatus.ProtoReflect.Descriptor instead.
func (*ServiceStatus) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{68}
}

func (x *ServiceStatus) GetServiceid() string {
	if x != nil {
		return x.Serviceid
	}
	return ""
}

func (x *ServiceStatus) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *ServiceStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ServiceStatusData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsActive bool             `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Statuses []*ServiceStatus `protobuf:"bytes,2,rep,name=statuses,proto3" json:"statuses,omitempty"`
}

func (x *ServiceStatusData) Reset() {
	*x = ServiceStatusData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStatusData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStatusData) ProtoMessage() {}

func (x *ServiceStatusData) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStatusData.ProtoReflect.Descriptor instead.
func (*ServiceStatusData) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{69}
}

func (x *ServiceStatusData) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *ServiceStatusData) GetStatuses() []*ServiceStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type ServiceStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServiceStatusRequest) Reset() {
	*x = ServiceStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStatusRequest) ProtoMessage() {}

func (x *ServiceStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStatusRequest.ProtoReflect.Descriptor instead.
func (*ServiceStatusRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{70}
}

type ServiceStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ServiceStatusData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ServiceStatusResponse) Reset() {
	*x = ServiceStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStatusResponse) ProtoMessage() {}

func (x *ServiceStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStatusResponse.ProtoReflect.Descriptor instead.
func (*ServiceStatusResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{71}
}

func (x *ServiceStatusResponse) GetData() *ServiceStatusData {
	if x != nil {
		return x.Data
	}
	return nil
}

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token        string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{72}
}

func (x *Session) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Session) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type SessionSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId            string   `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Mode             *Symbol  `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	Level            *Symbol  `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	RequiredFeatures []string `protobuf:"bytes,4,rep,name=required_features,json=requiredFeatures,proto3" json:"required_features,omitempty"`
}

func (x *SessionSettings) Reset() {
	*x = SessionSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionSettings) ProtoMessage() {}

func (x *SessionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionSettings.ProtoReflect.Descriptor instead.
func (*SessionSettings) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{73}
}

func (x *SessionSettings) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *SessionSettings) GetMode() *Symbol {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *SessionSettings) GetLevel() *Symbol {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *SessionSettings) GetRequiredFeatures() []string {
	if x != nil {
		return x.RequiredFeatures
	}
	return nil
}

type SetNextMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiscordId     string `protobuf:"bytes,1,opt,name=discord_id,json=discordId,proto3" json:"discord_id,omitempty"`
	UserId        string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MatchId       string `protobuf:"bytes,3,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	HostDiscordId string `protobuf:"bytes,4,opt,name=host_discord_id,json=hostDiscordId,proto3" json:"host_discord_id,omitempty"`
	Role          string `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *SetNextMatchRequest) Reset() {
	*x = SetNextMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNextMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNextMatchRequest) ProtoMessage() {}

func (x *SetNextMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNextMatchRequest.ProtoReflect.Descriptor instead.
func (*SetNextMatchRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{74}
}

func (x *SetNextMatchRequest) GetDiscordId() string {
	if x != nil {
		return x.DiscordId
	}
	return ""
}

func (x *SetNextMatchRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SetNextMatchRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *SetNextMatchRequest) GetHostDiscordId() string {
	if x != nil {
		return x.HostDiscordId
	}
	return ""
}

func (x *SetNextMatchRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type SetNextMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MatchId string `protobuf:"bytes,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
}

func (x *SetNextMatchResponse) Reset() {
	*x = SetNextMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNextMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNextMatchResponse) ProtoMessage() {}

func (x *SetNextMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNextMatchResponse.ProtoReflect.Descriptor instead.
func (*SetNextMatchResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{75}
}

func (x *SetNextMatchResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SetNextMatchResponse) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

type ShutdownMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId      string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	GraceSeconds int32  `protobuf:"varint,2,opt,name=grace_seconds,json=graceSeconds,proto3" json:"grace_seconds,omitempty"`
}

func (x *ShutdownMatchRequest) Reset() {
	*x = ShutdownMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownMatchRequest) ProtoMessage() {}

func (x *ShutdownMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownMatchRequest.ProtoReflect.Descriptor instead.
func (*ShutdownMatchRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{76}
}

func (x *ShutdownMatchRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *ShutdownMatchRequest) GetGraceSeconds() int32 {
	if x != nil {
		return x.GraceSeconds
	}
	return 0
}

type ShutdownMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Response string `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ShutdownMatchResponse) Reset() {
	*x = ShutdownMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownMatchResponse) ProtoMessage() {}

func (x *ShutdownMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownMatchResponse.ProtoReflect.Descriptor instead.
func (*ShutdownMatchResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{77}
}

func (x *ShutdownMatchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ShutdownMatchResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type StreamJoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode        uint32 `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`
	Subject     string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Subcontext  string `protobuf:"bytes,3,opt,name=subcontext,proto3" json:"subcontext,omitempty"`
	UserId      string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId   string `protobuf:"bytes,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Label       string `protobuf:"bytes,6,opt,name=label,proto3" json:"label,omitempty"`
	Hidden      bool   `protobuf:"varint,7,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Persistence bool   `protobuf:"varint,8,opt,name=persistence,proto3" json:"persistence,omitempty"`
	Status      string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *StreamJoinRequest) Reset() {
	*x = StreamJoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamJoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamJoinRequest) ProtoMessage() {}

func (x *StreamJoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamJoinRequest.ProtoReflect.Descriptor instead.
func (*StreamJoinRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{78}
}

func (x *StreamJoinRequest) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *StreamJoinRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *StreamJoinRequest) GetSubcontext() string {
	if x != nil {
		return x.Subcontext
	}
	return ""
}

func (x *StreamJoinRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *StreamJoinRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StreamJoinRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *StreamJoinRequest) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *StreamJoinRequest) GetPersistence() bool {
	if x != nil {
		return x.Persistence
	}
	return false
}

func (x *StreamJoinRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type StreamJoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool                `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Presences []*EvrMatchPresence `protobuf:"bytes,2,rep,name=presences,proto3" json:"presences,omitempty"`
}

func (x *StreamJoinResponse) Reset() {
	*x = StreamJoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamJoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamJoinResponse) ProtoMessage() {}

func (x *StreamJoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamJoinResponse.ProtoReflect.Descriptor instead.
func (*StreamJoinResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{79}
}

func (x *StreamJoinResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StreamJoinResponse) GetPresences() []*EvrMatchPresence {
	if x != nil {
		return x.Presences
	}
	return nil
}

type UserServerProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is a complex structure, using Any for now.
	Data *anypb.Any `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserServerProfile) Reset() {
	*x = UserServerProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserServerProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserServerProfile) ProtoMessage() {}

func (x *UserServerProfile) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserServerProfile.ProtoReflect.Descriptor instead.
func (*UserServerProfile) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{80}
}

func (x *UserServerProfile) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserServerProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Xpid      *EvrId `protobuf:"bytes,2,opt,name=xpid,proto3" json:"xpid,omitempty"`
	DiscordId string `protobuf:"bytes,3,opt,name=discord_id,json=discordId,proto3" json:"discord_id,omitempty"`
	GuildId   string `protobuf:"bytes,4,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	GroupId   string `protobuf:"bytes,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *UserServerProfileRequest) Reset() {
	*x = UserServerProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserServerProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserServerProfileRequest) ProtoMessage() {}

func (x *UserServerProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserServerProfileRequest.ProtoReflect.Descriptor instead.
func (*UserServerProfileRequest) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{81}
}

func (x *UserServerProfileRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserServerProfileRequest) GetXpid() *EvrId {
	if x != nil {
		return x.Xpid
	}
	return nil
}

func (x *UserServerProfileRequest) GetDiscordId() string {
	if x != nil {
		return x.DiscordId
	}
	return ""
}

func (x *UserServerProfileRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *UserServerProfileRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type UserServerProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *UserServerProfile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *UserServerProfileResponse) Reset() {
	*x = UserServerProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evr_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserServerProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserServerProfileResponse) ProtoMessage() {}

func (x *UserServerProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evr_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserServerProfileResponse.ProtoReflect.Descriptor instead.
func (*UserServerProfileResponse) Descriptor() ([]byte, []int) {
	return file_evr_proto_rawDescGZIP(), []int{82}
}

func (x *UserServerProfileResponse) GetProfile() *UserServerProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

var File_evr_proto protoreflect.FileDescriptor

var file_evr_proto_rawDesc = []byte{
	0x0a, 0x09, 0x65, 0x76, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x65, 0x76, 0x72,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1e, 0x0a, 0x06,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1d, 0x0a, 0x05,
	0x45, 0x76, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6b, 0x0a, 0x10, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x10, 0x63, 0x6f, 0x73, 0x6d, 0x65,
	0x74, 0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63,
	0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x52, 0x0f, 0x63, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69,
	0x63, 0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x14, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x78, 0x70, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd7, 0x01, 0x0a,
	0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x55, 0x72, 0x6c, 0x12, 0x31, 0x0a, 0x09, 0x69, 0x70, 0x71, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x69, 0x70,
	0x71, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5e, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x7c, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x22, 0xcd, 0x03, 0x0a, 0x14, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x56, 0x0a, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x76, 0x72, 0x2e,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6c,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x1a, 0x41, 0x0a, 0x13, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x3e, 0x0a, 0x15, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65,
	0x76, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x22, 0xcc, 0x01, 0x0a, 0x1b, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x43, 0x0a, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x72, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x12, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x22, 0x41, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x62, 0x61, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x65, 0x6e, 0x61,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74,
	0x47, 0x72, 0x65, 0x6e, 0x61, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x62, 0x61,
	0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x44, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x22, 0xaa, 0x04, 0x0a, 0x0f, 0x43, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x4c, 0x6f, 0x61,
	0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x63, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x63, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x63, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x63, 0x61, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x65, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x63, 0x61, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x66, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x6f, 0x61, 0x6c, 0x46, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x61,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x69, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x70, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x45, 0x6d, 0x6f, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x69, 0x6e, 0x74, 0x5f, 0x61,
	0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x69, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x69, 0x6e, 0x74,
	0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69,
	0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x69, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x58, 0x0a,
	0x14, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x67, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xa8, 0x01, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x3f, 0x0a, 0x08, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xbd, 0x03, 0x0a,
	0x10, 0x45, 0x76, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x65, 0x76, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x45,
	0x76, 0x72, 0x49, 0x64, 0x52, 0x05, 0x65, 0x76, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x22, 0x98, 0x03, 0x0a,
	0x12, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4a, 0x73,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x5c, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x76, 0x72, 0x2e,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x76, 0x65, 0x72, 0x22, 0x49, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c,
	0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x08, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x4c,
	0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x73,
	0x22, 0x39, 0x0a, 0x16, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f,
	0x61, 0x64, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x11, 0x4b,
	0x69, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x12, 0x4b, 0x69, 0x63,
	0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x22, 0xda, 0x02, 0x0a, 0x1a, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x48, 0x61, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xfd, 0x01,
	0x0a, 0x1b, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x48, 0x61, 0x79,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43,
	0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x48, 0x61, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x48, 0x61, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xbb, 0x02,
	0x0a, 0x19, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x48, 0x61, 0x79,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x75, 0x62, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xac, 0x02, 0x0a, 0x1d,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xc4, 0x01, 0x0a, 0x1e, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x22, 0x89, 0x03, 0x0a, 0x1a, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x75, 0x62, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6e, 0x75, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a,
	0x11, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x2e, 0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x4f, 0x0a, 0x17, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e,
	0x6b, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x34, 0x0a, 0x18, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x4c,
	0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x2e, 0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xa4, 0x02, 0x0a, 0x16, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x76, 0x72, 0x2e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x76,
	0x72, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73,
	0x63, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x5f, 0x65, 0x76, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x45, 0x76, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x6f,
	0x77, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x6e, 0x22, 0xdd, 0x07, 0x0a, 0x0a, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76,
	0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x65, 0x76, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x61, 0x77, 0x6e,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x4c, 0x0a, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x6c, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x65, 0x76, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x69, 0x6c, 0x65, 0x1a, 0x41, 0x0a, 0x13, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x18, 0x0a, 0x16, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xb5, 0x04, 0x0a, 0x17, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x73, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x75, 0x0a, 0x19, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x65, 0x76, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x27, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x1a, 0x63, 0x0a, 0x1c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x3e, 0x0a, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x41, 0x0a,
	0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x22, 0x71, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xea, 0x02, 0x0a, 0x1c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x1a, 0x57, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0c, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x76, 0x72,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x45, 0x0a, 0x13, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x3d, 0x0a, 0x11, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x18, 0x0a, 0x16, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x73, 0x0a, 0x17, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x76, 0x72,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x34, 0x0a, 0x17, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0x6c, 0x0a, 0x18, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xa6, 0x01,
	0x0a, 0x13, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x65, 0x76, 0x72, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x22, 0x3c, 0x0a,
	0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa8, 0x01, 0x0a, 0x17,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x47, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22,
	0xf9, 0x03, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x65, 0x61,
	0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x6c,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x65, 0x76, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x6c, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x6f,
	0x6c, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x25, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x51, 0x0a, 0x13, 0x52, 0x6f, 0x6c, 0x65,
	0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3d, 0x0a, 0x14, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xa7, 0x01, 0x0a, 0x0a, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x22, 0x7f, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x74,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x04, 0x72, 0x74, 0x74, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x74, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6d, 0x69, 0x6e, 0x52, 0x74, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x74, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x52, 0x74, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x74,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x52, 0x74, 0x74, 0x22, 0x2b, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d,
	0x69, 0x6e, 0x5f, 0x72, 0x74, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69,
	0x6e, 0x52, 0x74, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x74, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x52, 0x74, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x74, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52,
	0x74, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x76,
	0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x60, 0x0a, 0x11,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2e,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0x16,
	0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x65, 0x76, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x07, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x99, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x76, 0x72,
	0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65,
	0x76, 0x72, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xa4, 0x01,
	0x0a, 0x13, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x22, 0x4a, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x22, 0x56, 0x0a, 0x14, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x63,
	0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x4d, 0x0a, 0x15, 0x53, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x75, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x63, 0x0a, 0x12, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x76, 0x72, 0x2e, 0x45, 0x76, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x22, 0x3d, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xa8, 0x01, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x78, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x45, 0x76, 0x72, 0x49, 0x64, 0x52,
	0x04, 0x78, 0x70, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x19, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2a, 0x5b, 0x0a, 0x09, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x41, 0x53, 0x53, 0x49,
	0x47, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x50, 0x45, 0x43, 0x54, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4d,
	0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f,
	0x43, 0x49, 0x41, 0x4c, 0x10, 0x05, 0x32, 0x97, 0x10, 0x0a, 0x03, 0x45, 0x76, 0x72, 0x12, 0x46,
	0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x19, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x76, 0x72,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x19, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x13, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x48, 0x61, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x1f, 0x2e,
	0x65, 0x76, 0x72, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x48,
	0x61, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x48, 0x61, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x61, 0x0a, 0x16, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x65, 0x76, 0x72,
	0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x16, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x65, 0x76, 0x72, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x49, 0x6e, 0x12, 0x19, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x1b,
	0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x76,
	0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x11, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x2e, 0x65,
	0x76, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x0d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x19, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x65, 0x76, 0x72, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x53, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x2e, 0x65, 0x76, 0x72,
	0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x53, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x16, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x18, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x76, 0x72,
	0x2e, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x2e, 0x65,
	0x76, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x76, 0x72,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x4b, 0x69, 0x63,
	0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4b, 0x69,
	0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x1d, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x12, 0x16, 0x2e,
	0x65, 0x76, 0x72, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x2e, 0x65, 0x76,
	0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x61, 0x64,
	0x6f, 0x75, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x61,
	0x64, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x1c, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1b, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x14,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x17, 0x2e, 0x65, 0x76, 0x72,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x12, 0x18, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x76, 0x72,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x55, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x72, 0x6f, 0x69, 0x63, 0x6c, 0x61,
	0x62, 0x73, 0x2e, 0x65, 0x76, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x42, 0x06, 0x45, 0x76, 0x72, 0x41,
	0x70, 0x69, 0x50, 0x01, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x68, 0x65, 0x72, 0x6f, 0x69, 0x63, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x6e, 0x61, 0x6b, 0x61,
	0x6d, 0x61, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x67, 0x72, 0x70, 0x63, 0xaa, 0x02, 0x07,
	0x45, 0x76, 0x72, 0x2e, 0x41, 0x50, 0x49, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_evr_proto_rawDescOnce sync.Once
	file_evr_proto_rawDescData = file_evr_proto_rawDesc
)

func file_evr_proto_rawDescGZIP() []byte {
	file_evr_proto_rawDescOnce.Do(func() {
		file_evr_proto_rawDescData = protoimpl.X.CompressGZIP(file_evr_proto_rawDescData)
	})
	return file_evr_proto_rawDescData
}

var file_evr_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_evr_proto_msgTypes = make([]protoimpl.MessageInfo, 91)
var file_evr_proto_goTypes = []interface{}{
	(TeamIndex)(0),                         // 0: evr.TeamIndex
	(*Symbol)(nil),                         // 1: evr.Symbol
	(*EvrId)(nil),                          // 2: evr.EvrId
	(*AccountCosmetics)(nil),               // 3: evr.AccountCosmetics
	(*AccountLookupRequest)(nil),           // 4: evr.AccountLookupRequest
	(*AccountLookupResponse)(nil),          // 5: evr.AccountLookupResponse
	(*AccountSearchRequest)(nil),           // 6: evr.AccountSearchRequest
	(*AccountSearchResponse)(nil),          // 7: evr.AccountSearchResponse
	(*AllocateMatchRequest)(nil),           // 8: evr.AllocateMatchRequest
	(*AllocateMatchResponse)(nil),          // 9: evr.AllocateMatchResponse
	(*AuthenticatePasswordRequest)(nil),    // 10: evr.AuthenticatePasswordRequest
	(*BuildMatchRequest)(nil),              // 11: evr.BuildMatchRequest
	(*BuildMatchResponse)(nil),             // 12: evr.BuildMatchResponse
	(*CheckForceUserRequest)(nil),          // 13: evr.CheckForceUserRequest
	(*CheckForceUserResponse)(nil),         // 14: evr.CheckForceUserResponse
	(*CombatLoadout)(nil),                  // 15: evr.CombatLoadout
	(*CosmeticLoadout)(nil),                // 16: evr.CosmeticLoadout
	(*DiscordSignInRequest)(nil),           // 17: evr.DiscordSignInRequest
	(*DiscordSignInResponse)(nil),          // 18: evr.DiscordSignInResponse
	(*DisplayNameMatchItem)(nil),           // 19: evr.DisplayNameMatchItem
	(*Endpoint)(nil),                       // 20: evr.Endpoint
	(*EvrMatchPresence)(nil),               // 21: evr.EvrMatchPresence
	(*GameServerPresence)(nil),             // 22: evr.GameServerPresence
	(*GameState)(nil),                      // 23: evr.GameState
	(*ImportLoadoutsRequest)(nil),          // 24: evr.ImportLoadoutsRequest
	(*ImportLoadoutsResponse)(nil),         // 25: evr.ImportLoadoutsResponse
	(*KickPlayerRequest)(nil),              // 26: evr.KickPlayerRequest
	(*KickPlayerResponse)(nil),             // 27: evr.KickPlayerResponse
	(*LeaderboardHaystackRequest)(nil),     // 28: evr.LeaderboardHaystackRequest
	(*LeaderboardHaystackResponse)(nil),    // 29: evr.LeaderboardHaystackResponse
	(*LeaderboardHaystackRecord)(nil),      // 30: evr.LeaderboardHaystackRecord
	(*LeaderboardRecordsListRequest)(nil),  // 31: evr.LeaderboardRecordsListRequest
	(*LeaderboardRecordsListResponse)(nil), // 32: evr.LeaderboardRecordsListResponse
	(*LeaderboardRecordsListItem)(nil),     // 33: evr.LeaderboardRecordsListItem
	(*LinkDeviceRequest)(nil),              // 34: evr.LinkDeviceRequest
	(*LinkDeviceResponse)(nil),             // 35: evr.LinkDeviceResponse
	(*LinkUserIdDeviceRequest)(nil),        // 36: evr.LinkUserIdDeviceRequest
	(*LinkUserIdDeviceResponse)(nil),       // 37: evr.LinkUserIdDeviceResponse
	(*LinkingAppRequest)(nil),              // 38: evr.LinkingAppRequest
	(*LinkingAppResponse)(nil),             // 39: evr.LinkingAppResponse
	(*LobbySessionParameters)(nil),         // 40: evr.LobbySessionParameters
	(*MatchGoal)(nil),                      // 41: evr.MatchGoal
	(*MatchLabel)(nil),                     // 42: evr.MatchLabel
	(*MatchListPublicRequest)(nil),         // 43: evr.MatchListPublicRequest
	(*MatchListPublicResponse)(nil),        // 44: evr.MatchListPublicResponse
	(*MatchmakingTickets)(nil),             // 45: evr.MatchmakingTickets
	(*MatchRequest)(nil),                   // 46: evr.MatchRequest
	(*MatchResponse)(nil),                  // 47: evr.MatchResponse
	(*MatchmakerCandidatesRequest)(nil),    // 48: evr.MatchmakerCandidatesRequest
	(*MatchmakerCandidatesResponse)(nil),   // 49: evr.MatchmakerCandidatesResponse
	(*MatchmakerEntryList)(nil),            // 50: evr.MatchmakerEntryList
	(*MatchmakerEntry)(nil),                // 51: evr.MatchmakerEntry
	(*MatchmakerExtract)(nil),              // 52: evr.MatchmakerExtract
	(*MatchmakerStateRequest)(nil),         // 53: evr.MatchmakerStateRequest
	(*MatchmakerStateResponse)(nil),        // 54: evr.MatchmakerStateResponse
	(*MatchmakerStreamRequest)(nil),        // 55: evr.MatchmakerStreamRequest
	(*MatchmakerStreamResponse)(nil),       // 56: evr.MatchmakerStreamResponse
	(*MatchmakingPresence)(nil),            // 57: evr.MatchmakingPresence
	(*PlayerInfo)(nil),                     // 58: evr.PlayerInfo
	(*PlayerStatistics)(nil),               // 59: evr.PlayerStatistics
	(*PlayerStatisticsRequest)(nil),        // 60: evr.PlayerStatisticsRequest
	(*PlayerStatisticsResponse)(nil),       // 61: evr.PlayerStatisticsResponse
	(*PrepareMatchRequest)(nil),            // 62: evr.PrepareMatchRequest
	(*PrepareMatchResponse)(nil),           // 63: evr.PrepareMatchResponse
	(*RoundClock)(nil),                     // 64: evr.RoundClock
	(*ServerScoreRequest)(nil),             // 65: evr.ServerScoreRequest
	(*ServerScoreResponse)(nil),            // 66: evr.ServerScoreResponse
	(*ServerScoresRequest)(nil),            // 67: evr.ServerScoresRequest
	(*ServerScoresResponse)(nil),           // 68: evr.ServerScoresResponse
	(*ServiceStatus)(nil),                  // 69: evr.ServiceStatus
	(*ServiceStatusData)(nil),              // 70: evr.ServiceStatusData
	(*ServiceStatusRequest)(nil),           // 71: evr.ServiceStatusRequest
	(*ServiceStatusResponse)(nil),          // 72: evr.ServiceStatusResponse
	(*Session)(nil),                        // 73: evr.Session
	(*SessionSettings)(nil),                // 74: evr.SessionSettings
	(*SetNextMatchRequest)(nil),            // 75: evr.SetNextMatchRequest
	(*SetNextMatchResponse)(nil),           // 76: evr.SetNextMatchResponse
	(*ShutdownMatchRequest)(nil),           // 77: evr.ShutdownMatchRequest
	(*ShutdownMatchResponse)(nil),          // 78: evr.ShutdownMatchResponse
	(*StreamJoinRequest)(nil),              // 79: evr.StreamJoinRequest
	(*StreamJoinResponse)(nil),             // 80: evr.StreamJoinResponse
	(*UserServerProfile)(nil),              // 81: evr.UserServerProfile
	(*UserServerProfileRequest)(nil),       // 82: evr.UserServerProfileRequest
	(*UserServerProfileResponse)(nil),      // 83: evr.UserServerProfileResponse
	nil,                                    // 84: evr.AllocateMatchRequest.TeamAlignmentsEntry
	nil,                                    // 85: evr.MatchLabel.TeamAlignmentsEntry
	nil,                                    // 86: evr.MatchListPublicResponse.ActiveMatchmakingCountsEntry
	nil,                                    // 87: evr.MatchmakingTickets.TicketsEntry
	nil,                                    // 88: evr.MatchmakerCandidatesResponse.CandidatesEntry
	nil,                                    // 89: evr.MatchmakerCandidatesResponse.MatchesEntry
	nil,                                    // 90: evr.PrepareMatchRequest.RoleAlignmentsEntry
	nil,                                    // 91: evr.ServerScoresResponse.ScoresEntry
	(*anypb.Any)(nil),                      // 92: google.protobuf.Any
	(*timestamppb.Timestamp)(nil),          // 93: google.protobuf.Timestamp
	(*wrapperspb.Int32Value)(nil),          // 94: google.protobuf.Int32Value
}
var file_evr_proto_depIdxs = []int32{
	16,  // 0: evr.AccountCosmetics.cosmetic_loadout:type_name -> evr.CosmeticLoadout
	92,  // 1: evr.AccountLookupResponse.ipqs_data:type_name -> google.protobuf.Any
	19,  // 2: evr.AccountSearchResponse.display_name_matches:type_name -> evr.DisplayNameMatchItem
	93,  // 3: evr.AllocateMatchRequest.expiry_time:type_name -> google.protobuf.Timestamp
	84,  // 4: evr.AllocateMatchRequest.team_alignments:type_name -> evr.AllocateMatchRequest.TeamAlignmentsEntry
	94,  // 5: evr.AllocateMatchRequest.team_size:type_name -> google.protobuf.Int32Value
	42,  // 6: evr.AllocateMatchResponse.label:type_name -> evr.MatchLabel
	51,  // 7: evr.BuildMatchRequest.entries:type_name -> evr.MatchmakerEntry
	93,  // 8: evr.DisplayNameMatchItem.updated_at:type_name -> google.protobuf.Timestamp
	2,   // 9: evr.EvrMatchPresence.evr_id:type_name -> evr.EvrId
	93,  // 10: evr.EvrMatchPresence.matchmaking_at:type_name -> google.protobuf.Timestamp
	20,  // 11: evr.GameServerPresence.endpoint:type_name -> evr.Endpoint
	64,  // 12: evr.GameState.round_clock:type_name -> evr.RoundClock
	16,  // 13: evr.ImportLoadoutsRequest.loadouts:type_name -> evr.CosmeticLoadout
	1,   // 14: evr.LeaderboardHaystackRequest.game_mode:type_name -> evr.Symbol
	30,  // 15: evr.LeaderboardHaystackResponse.owner_records:type_name -> evr.LeaderboardHaystackRecord
	30,  // 16: evr.LeaderboardHaystackResponse.records:type_name -> evr.LeaderboardHaystackRecord
	1,   // 17: evr.LeaderboardRecordsListRequest.mode:type_name -> evr.Symbol
	33,  // 18: evr.LeaderboardRecordsListResponse.records:type_name -> evr.LeaderboardRecordsListItem
	93,  // 19: evr.LeaderboardRecordsListItem.create_time:type_name -> google.protobuf.Timestamp
	93,  // 20: evr.LeaderboardRecordsListItem.update_time:type_name -> google.protobuf.Timestamp
	93,  // 21: evr.LeaderboardRecordsListItem.expiry_time:type_name -> google.protobuf.Timestamp
	1,   // 22: evr.LobbySessionParameters.mode:type_name -> evr.Symbol
	1,   // 23: evr.LobbySessionParameters.level:type_name -> evr.Symbol
	93,  // 24: evr.MatchLabel.created_at:type_name -> google.protobuf.Timestamp
	93,  // 25: evr.MatchLabel.start_time:type_name -> google.protobuf.Timestamp
	93,  // 26: evr.MatchLabel.locked_at:type_name -> google.protobuf.Timestamp
	22,  // 27: evr.MatchLabel.game_server:type_name -> evr.GameServerPresence
	1,   // 28: evr.MatchLabel.mode:type_name -> evr.Symbol
	1,   // 29: evr.MatchLabel.level:type_name -> evr.Symbol
	58,  // 30: evr.MatchLabel.players:type_name -> evr.PlayerInfo
	23,  // 31: evr.MatchLabel.game_state:type_name -> evr.GameState
	74,  // 32: evr.MatchLabel.session_settings:type_name -> evr.SessionSettings
	85,  // 33: evr.MatchLabel.team_alignments:type_name -> evr.MatchLabel.TeamAlignmentsEntry
	93,  // 34: evr.MatchListPublicResponse.update_time:type_name -> google.protobuf.Timestamp
	86,  // 35: evr.MatchListPublicResponse.active_matchmaking_counts:type_name -> evr.MatchListPublicResponse.ActiveMatchmakingCountsEntry
	42,  // 36: evr.MatchListPublicResponse.labels:type_name -> evr.MatchLabel
	22,  // 37: evr.MatchListPublicResponse.gameservers:type_name -> evr.GameServerPresence
	87,  // 38: evr.MatchmakingTickets.tickets:type_name -> evr.MatchmakingTickets.TicketsEntry
	88,  // 39: evr.MatchmakerCandidatesResponse.candidates:type_name -> evr.MatchmakerCandidatesResponse.CandidatesEntry
	89,  // 40: evr.MatchmakerCandidatesResponse.matches:type_name -> evr.MatchmakerCandidatesResponse.MatchesEntry
	51,  // 41: evr.MatchmakerEntryList.entries:type_name -> evr.MatchmakerEntry
	40,  // 42: evr.MatchmakerEntry.parameters:type_name -> evr.LobbySessionParameters
	92,  // 43: evr.MatchmakerExtract.data:type_name -> google.protobuf.Any
	92,  // 44: evr.MatchmakerStateResponse.stats:type_name -> google.protobuf.Any
	52,  // 45: evr.MatchmakerStateResponse.index:type_name -> evr.MatchmakerExtract
	57,  // 46: evr.MatchmakerStreamResponse.presences:type_name -> evr.MatchmakingPresence
	40,  // 47: evr.MatchmakingPresence.parameters:type_name -> evr.LobbySessionParameters
	92,  // 48: evr.PlayerStatistics.data:type_name -> google.protobuf.Any
	1,   // 49: evr.PlayerStatisticsRequest.mode:type_name -> evr.Symbol
	59,  // 50: evr.PlayerStatisticsResponse.stats:type_name -> evr.PlayerStatistics
	1,   // 51: evr.PrepareMatchRequest.mode:type_name -> evr.Symbol
	1,   // 52: evr.PrepareMatchRequest.level:type_name -> evr.Symbol
	90,  // 53: evr.PrepareMatchRequest.role_alignments:type_name -> evr.PrepareMatchRequest.RoleAlignmentsEntry
	93,  // 54: evr.PrepareMatchRequest.start_time:type_name -> google.protobuf.Timestamp
	42,  // 55: evr.PrepareMatchRequest.label:type_name -> evr.MatchLabel
	42,  // 56: evr.PrepareMatchResponse.label:type_name -> evr.MatchLabel
	93,  // 57: evr.RoundClock.start_time:type_name -> google.protobuf.Timestamp
	93,  // 58: evr.RoundClock.end_time:type_name -> google.protobuf.Timestamp
	91,  // 59: evr.ServerScoresResponse.scores:type_name -> evr.ServerScoresResponse.ScoresEntry
	69,  // 60: evr.ServiceStatusData.statuses:type_name -> evr.ServiceStatus
	70,  // 61: evr.ServiceStatusResponse.data:type_name -> evr.ServiceStatusData
	1,   // 62: evr.SessionSettings.mode:type_name -> evr.Symbol
	1,   // 63: evr.SessionSettings.level:type_name -> evr.Symbol
	21,  // 64: evr.StreamJoinResponse.presences:type_name -> evr.EvrMatchPresence
	92,  // 65: evr.UserServerProfile.data:type_name -> google.protobuf.Any
	2,   // 66: evr.UserServerProfileRequest.xpid:type_name -> evr.EvrId
	81,  // 67: evr.UserServerProfileResponse.profile:type_name -> evr.UserServerProfile
	45,  // 68: evr.MatchListPublicResponse.ActiveMatchmakingCountsEntry.value:type_name -> evr.MatchmakingTickets
	50,  // 69: evr.MatchmakerCandidatesResponse.CandidatesEntry.value:type_name -> evr.MatchmakerEntryList
	50,  // 70: evr.MatchmakerCandidatesResponse.MatchesEntry.value:type_name -> evr.MatchmakerEntryList
	0,   // 71: evr.PrepareMatchRequest.RoleAlignmentsEntry.value:type_name -> evr.TeamIndex
	6,   // 72: evr.Evr.AccountSearch:input_type -> evr.AccountSearchRequest
	4,   // 73: evr.Evr.AccountLookup:input_type -> evr.AccountLookupRequest
	10,  // 74: evr.Evr.AuthenticatePassword:input_type -> evr.AuthenticatePasswordRequest
	28,  // 75: evr.Evr.LeaderboardHaystack:input_type -> evr.LeaderboardHaystackRequest
	31,  // 76: evr.Evr.LeaderboardRecordsList:input_type -> evr.LeaderboardRecordsListRequest
	34,  // 77: evr.Evr.LinkDevice:input_type -> evr.LinkDeviceRequest
	36,  // 78: evr.Evr.LinkUserIdDevice:input_type -> evr.LinkUserIdDeviceRequest
	17,  // 79: evr.Evr.DiscordSignIn:input_type -> evr.DiscordSignInRequest
	43,  // 80: evr.Evr.MatchListPublic:input_type -> evr.MatchListPublicRequest
	46,  // 81: evr.Evr.GetMatch:input_type -> evr.MatchRequest
	62,  // 82: evr.Evr.PrepareMatch:input_type -> evr.PrepareMatchRequest
	8,   // 83: evr.Evr.AllocateMatch:input_type -> evr.AllocateMatchRequest
	77,  // 84: evr.Evr.ShutdownMatch:input_type -> evr.ShutdownMatchRequest
	11,  // 85: evr.Evr.BuildMatch:input_type -> evr.BuildMatchRequest
	75,  // 86: evr.Evr.SetNextMatch:input_type -> evr.SetNextMatchRequest
	60,  // 87: evr.Evr.GetPlayerStatistics:input_type -> evr.PlayerStatisticsRequest
	26,  // 88: evr.Evr.KickPlayer:input_type -> evr.KickPlayerRequest
	82,  // 89: evr.Evr.GetUserServerProfile:input_type -> evr.UserServerProfileRequest
	38,  // 90: evr.Evr.LinkingApp:input_type -> evr.LinkingAppRequest
	71,  // 91: evr.Evr.GetStatus:input_type -> evr.ServiceStatusRequest
	24,  // 92: evr.Evr.ImportLoadouts:input_type -> evr.ImportLoadoutsRequest
	55,  // 93: evr.Evr.MatchmakerStream:input_type -> evr.MatchmakerStreamRequest
	53,  // 94: evr.Evr.MatchmakerState:input_type -> evr.MatchmakerStateRequest
	48,  // 95: evr.Evr.MatchmakerCandidates:input_type -> evr.MatchmakerCandidatesRequest
	79,  // 96: evr.Evr.StreamJoin:input_type -> evr.StreamJoinRequest
	65,  // 97: evr.Evr.GetServerScore:input_type -> evr.ServerScoreRequest
	67,  // 98: evr.Evr.GetServerScores:input_type -> evr.ServerScoresRequest
	13,  // 99: evr.Evr.CheckForceUser:input_type -> evr.CheckForceUserRequest
	7,   // 100: evr.Evr.AccountSearch:output_type -> evr.AccountSearchResponse
	5,   // 101: evr.Evr.AccountLookup:output_type -> evr.AccountLookupResponse
	73,  // 102: evr.Evr.AuthenticatePassword:output_type -> evr.Session
	29,  // 103: evr.Evr.LeaderboardHaystack:output_type -> evr.LeaderboardHaystackResponse
	32,  // 104: evr.Evr.LeaderboardRecordsList:output_type -> evr.LeaderboardRecordsListResponse
	35,  // 105: evr.Evr.LinkDevice:output_type -> evr.LinkDeviceResponse
	37,  // 106: evr.Evr.LinkUserIdDevice:output_type -> evr.LinkUserIdDeviceResponse
	18,  // 107: evr.Evr.DiscordSignIn:output_type -> evr.DiscordSignInResponse
	44,  // 108: evr.Evr.MatchListPublic:output_type -> evr.MatchListPublicResponse
	47,  // 109: evr.Evr.GetMatch:output_type -> evr.MatchResponse
	63,  // 110: evr.Evr.PrepareMatch:output_type -> evr.PrepareMatchResponse
	9,   // 111: evr.Evr.AllocateMatch:output_type -> evr.AllocateMatchResponse
	78,  // 112: evr.Evr.ShutdownMatch:output_type -> evr.ShutdownMatchResponse
	12,  // 113: evr.Evr.BuildMatch:output_type -> evr.BuildMatchResponse
	76,  // 114: evr.Evr.SetNextMatch:output_type -> evr.SetNextMatchResponse
	61,  // 115: evr.Evr.GetPlayerStatistics:output_type -> evr.PlayerStatisticsResponse
	27,  // 116: evr.Evr.KickPlayer:output_type -> evr.KickPlayerResponse
	83,  // 117: evr.Evr.GetUserServerProfile:output_type -> evr.UserServerProfileResponse
	39,  // 118: evr.Evr.LinkingApp:output_type -> evr.LinkingAppResponse
	72,  // 119: evr.Evr.GetStatus:output_type -> evr.ServiceStatusResponse
	25,  // 120: evr.Evr.ImportLoadouts:output_type -> evr.ImportLoadoutsResponse
	56,  // 121: evr.Evr.MatchmakerStream:output_type -> evr.MatchmakerStreamResponse
	54,  // 122: evr.Evr.MatchmakerState:output_type -> evr.MatchmakerStateResponse
	49,  // 123: evr.Evr.MatchmakerCandidates:output_type -> evr.MatchmakerCandidatesResponse
	80,  // 124: evr.Evr.StreamJoin:output_type -> evr.StreamJoinResponse
	66,  // 125: evr.Evr.GetServerScore:output_type -> evr.ServerScoreResponse
	68,  // 126: evr.Evr.GetServerScores:output_type -> evr.ServerScoresResponse
	14,  // 127: evr.Evr.CheckForceUser:output_type -> evr.CheckForceUserResponse
	100, // [100:128] is the sub-list for method output_type
	72,  // [72:100] is the sub-list for method input_type
	72,  // [72:72] is the sub-list for extension type_name
	72,  // [72:72] is the sub-list for extension extendee
	0,   // [0:72] is the sub-list for field type_name
}

func init() { file_evr_proto_init() }
func file_evr_proto_init() {
	if File_evr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_evr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Symbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvrId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountCosmetics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountLookupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountLookupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocateMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocateMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticatePasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckForceUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckForceUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CombatLoadout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CosmeticLoadout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscordSignInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscordSignInResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayNameMatchItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvrMatchPresence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameServerPresence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportLoadoutsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportLoadoutsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickPlayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickPlayerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderboardHaystackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderboardHaystackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderboardHaystackRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderboardRecordsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderboardRecordsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderboardRecordsListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkUserIdDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkUserIdDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkingAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkingAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LobbySessionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchGoal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchListPublicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchListPublicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchmakingTickets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchmakerCandidatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchmakerCandidatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchmakerEntryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchmakerEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchmakerExtract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchmakerStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchmakerStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchmakerStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchmakerStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchmakingPresence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundClock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerScoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerScoresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerScoresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStatusData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNextMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNextMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamJoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamJoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserServerProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserServerProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evr_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserServerProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_evr_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   91,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_evr_proto_goTypes,
		DependencyIndexes: file_evr_proto_depIdxs,
		EnumInfos:         file_evr_proto_enumTypes,
		MessageInfos:      file_evr_proto_msgTypes,
	}.Build()
	File_evr_proto = out.File
	file_evr_proto_rawDesc = nil
	file_evr_proto_goTypes = nil
	file_evr_proto_depIdxs = nil
}
